export const Python = "# Complete Python Cheat Sheet & Professional Practices\r\n\r\n## Table of Contents\r\n\r\n1. [Python Basics](#python-basics)\r\n2. [Data Types & Variables](#data-types--variables)\r\n3. [Control Flow](#control-flow)\r\n4. [Functions](#functions)\r\n5. [Data Structures](#data-structures)\r\n6. [Object-Oriented Programming](#object-oriented-programming)\r\n7. [Error Handling](#error-handling)\r\n8. [File I/O](#file-io)\r\n9. [Modules & Packages](#modules--packages)\r\n10. [Built-in Functions](#built-in-functions)\r\n11. [List/Dict/Set Comprehensions](#listdictset-comprehensions)\r\n12. [Generators & Iterators](#generators--iterators)\r\n13. [Decorators](#decorators)\r\n14. [Context Managers](#context-managers)\r\n15. [Regular Expressions](#regular-expressions)\r\n16. [Testing](#testing)\r\n17. [Performance & Optimization](#performance--optimization)\r\n18. [Professional Best Practices](#professional-best-practices)\r\n19. [Code Style & Standards](#code-style--standards)\r\n20. [Advanced Topics](#advanced-topics)\r\n\r\n---\r\n\r\n## Python Basics\r\n\r\n### Comments\r\n\r\n```python\r\n# Single line comment\r\n\"\"\"\r\nMulti-line comment\r\nor docstring\r\n\"\"\"\r\n```\r\n\r\n### Print & Input\r\n\r\n```python\r\nprint(\"Hello, World!\")\r\nprint(\"Name:\", name, \"Age:\", age)\r\nprint(f\"Name: {name}, Age: {age}\")  # f-strings (preferred)\r\nname = input(\"Enter your name: \")\r\nage = int(input(\"Enter your age: \"))\r\n```\r\n\r\n### Variables & Assignment\r\n\r\n```python\r\n# Variable assignment\r\nx = 5\r\ny, z = 10, 20  # Multiple assignment\r\nx, y = y, x    # Swap values\r\n\r\n# Constants (by convention, use UPPERCASE)\r\nPI = 3.14159\r\nMAX_SIZE = 100\r\n```\r\n\r\n---\r\n\r\n## Data Types & Variables\r\n\r\n### Basic Data Types\r\n\r\n```python\r\n# Integers\r\nnum = 42\r\nbinary = 0b1010  # 10 in binary\r\noctal = 0o12     # 10 in octal\r\nhex_num = 0xA    # 10 in hexadecimal\r\n\r\n# Floats\r\npi = 3.14159\r\nscientific = 1.5e-4  # 0.00015\r\n\r\n# Strings\r\nname = \"Alice\"\r\nmessage = 'Hello'\r\nmultiline = \"\"\"This is a\r\nmultiline string\"\"\"\r\n\r\n# Booleans\r\nis_valid = True\r\nis_empty = False\r\n\r\n# None\r\nresult = None\r\n```\r\n\r\n### String Operations\r\n\r\n```python\r\n# String methods\r\ntext = \"Hello, World!\"\r\nprint(text.upper())      # HELLO, WORLD!\r\nprint(text.lower())      # hello, world!\r\nprint(text.title())      # Hello, World!\r\nprint(text.strip())      # Remove whitespace\r\nprint(text.replace(\"Hello\", \"Hi\"))  # Hi, World!\r\nprint(text.split(\",\"))   # ['Hello', ' World!']\r\n\r\n# String formatting\r\nname = \"Alice\"\r\nage = 30\r\nprint(f\"Name: {name}, Age: {age}\")  # f-strings (Python 3.6+)\r\nprint(\"Name: {}, Age: {}\".format(name, age))  # .format()\r\nprint(\"Name: %s, Age: %d\" % (name, age))  # % formatting (old style)\r\n\r\n# String slicing\r\ntext = \"Python\"\r\nprint(text[0])      # P\r\nprint(text[-1])     # n\r\nprint(text[1:4])    # yth\r\nprint(text[:3])     # Pyt\r\nprint(text[3:])     # hon\r\nprint(text[::-1])   # nohtyP (reverse)\r\n```\r\n\r\n### Type Conversion\r\n\r\n```python\r\n# Convert between types\r\nstr_num = \"42\"\r\nint_num = int(str_num)\r\nfloat_num = float(str_num)\r\nstr_again = str(int_num)\r\n\r\n# Check types\r\nprint(type(42))         # <class 'int'>\r\nprint(isinstance(42, int))  # True\r\n```\r\n\r\n---\r\n\r\n## Control Flow\r\n\r\n### Conditional Statements\r\n\r\n```python\r\n# if-elif-else\r\nage = 18\r\nif age >= 18:\r\n    print(\"Adult\")\r\nelif age >= 13:\r\n    print(\"Teenager\")\r\nelse:\r\n    print(\"Child\")\r\n\r\n# Ternary operator\r\nstatus = \"Adult\" if age >= 18 else \"Minor\"\r\n\r\n# Multiple conditions\r\nif age >= 18 and age < 65:\r\n    print(\"Working age\")\r\n\r\nif name == \"Alice\" or name == \"Bob\":\r\n    print(\"Known person\")\r\n```\r\n\r\n### Loops\r\n\r\n```python\r\n# for loop\r\nfor i in range(5):\r\n    print(i)  # 0, 1, 2, 3, 4\r\n\r\nfor i in range(1, 6):\r\n    print(i)  # 1, 2, 3, 4, 5\r\n\r\nfor i in range(0, 10, 2):\r\n    print(i)  # 0, 2, 4, 6, 8\r\n\r\n# Iterating over sequences\r\nfruits = [\"apple\", \"banana\", \"orange\"]\r\nfor fruit in fruits:\r\n    print(fruit)\r\n\r\n# Enumerate for index and value\r\nfor index, fruit in enumerate(fruits):\r\n    print(f\"{index}: {fruit}\")\r\n\r\n# while loop\r\ncount = 0\r\nwhile count < 5:\r\n    print(count)\r\n    count += 1\r\n\r\n# Loop control\r\nfor i in range(10):\r\n    if i == 3:\r\n        continue  # Skip this iteration\r\n    if i == 7:\r\n        break     # Exit loop\r\n    print(i)\r\n\r\n# else clause with loops\r\nfor i in range(5):\r\n    print(i)\r\nelse:\r\n    print(\"Loop completed normally\")  # Only if no break\r\n```\r\n\r\n---\r\n\r\n## Functions\r\n\r\n### Function Definition\r\n\r\n```python\r\n# Basic function\r\ndef greet(name):\r\n    return f\"Hello, {name}!\"\r\n\r\n# Function with default parameters\r\ndef greet(name, greeting=\"Hello\"):\r\n    return f\"{greeting}, {name}!\"\r\n\r\n# Function with multiple parameters\r\ndef add(a, b):\r\n    return a + b\r\n\r\n# Function with *args and **kwargs\r\ndef flexible_func(*args, **kwargs):\r\n    print(\"Args:\", args)\r\n    print(\"Kwargs:\", kwargs)\r\n\r\nflexible_func(1, 2, 3, name=\"Alice\", age=30)\r\n\r\n# Type hints (Python 3.5+)\r\ndef add_numbers(a: int, b: int) -> int:\r\n    return a + b\r\n\r\n# Function with optional parameters\r\ndef create_user(name: str, email: str = None, age: int = None) -> dict:\r\n    user = {\"name\": name}\r\n    if email:\r\n        user[\"email\"] = email\r\n    if age:\r\n        user[\"age\"] = age\r\n    return user\r\n```\r\n\r\n### Lambda Functions\r\n\r\n```python\r\n# Lambda (anonymous) functions\r\nsquare = lambda x: x ** 2\r\nadd = lambda x, y: x + y\r\n\r\n# Using lambda with built-in functions\r\nnumbers = [1, 2, 3, 4, 5]\r\nsquared = list(map(lambda x: x ** 2, numbers))\r\neven = list(filter(lambda x: x % 2 == 0, numbers))\r\n```\r\n\r\n### Higher-Order Functions\r\n\r\n```python\r\n# Functions as arguments\r\ndef apply_operation(func, x, y):\r\n    return func(x, y)\r\n\r\nresult = apply_operation(lambda a, b: a + b, 5, 3)  # 8\r\n\r\n# Functions returning functions\r\ndef create_multiplier(n):\r\n    def multiplier(x):\r\n        return x * n\r\n    return multiplier\r\n\r\ndouble = create_multiplier(2)\r\nprint(double(5))  # 10\r\n```\r\n\r\n---\r\n\r\n## Data Structures\r\n\r\n### Lists\r\n\r\n```python\r\n# List creation\r\nfruits = [\"apple\", \"banana\", \"orange\"]\r\nnumbers = [1, 2, 3, 4, 5]\r\nmixed = [1, \"hello\", 3.14, True]\r\n\r\n# List operations\r\nfruits.append(\"grape\")          # Add to end\r\nfruits.insert(1, \"kiwi\")        # Insert at index\r\nfruits.remove(\"banana\")         # Remove by value\r\npopped = fruits.pop()           # Remove and return last\r\nfruits.extend([\"mango\", \"pear\"]) # Add multiple items\r\n\r\n# List slicing\r\nprint(fruits[1:3])    # Elements from index 1 to 2\r\nprint(fruits[:2])     # First 2 elements\r\nprint(fruits[2:])     # From index 2 to end\r\nprint(fruits[-2:])    # Last 2 elements\r\n\r\n# List methods\r\nfruits.sort()                   # Sort in place\r\nsorted_fruits = sorted(fruits)  # Return new sorted list\r\nfruits.reverse()                # Reverse in place\r\ncount = fruits.count(\"apple\")   # Count occurrences\r\nindex = fruits.index(\"apple\")   # Find index\r\n\r\n# List comprehensions\r\nsquares = [x**2 for x in range(10)]\r\neven_squares = [x**2 for x in range(10) if x % 2 == 0]\r\n```\r\n\r\n### Tuples\r\n\r\n```python\r\n# Tuple creation\r\npoint = (3, 4)\r\ncolors = (\"red\", \"green\", \"blue\")\r\nsingle_item = (42,)  # Note the comma\r\n\r\n# Tuple unpacking\r\nx, y = point\r\nfirst, *rest = colors  # first=\"red\", rest=[\"green\", \"blue\"]\r\n\r\n# Named tuples\r\nfrom collections import namedtuple\r\nPoint = namedtuple('Point', ['x', 'y'])\r\np = Point(3, 4)\r\nprint(p.x, p.y)  # 3 4\r\n```\r\n\r\n### Dictionaries\r\n\r\n```python\r\n# Dictionary creation\r\nperson = {\"name\": \"Alice\", \"age\": 30, \"city\": \"New York\"}\r\nempty_dict = {}\r\ndict_from_keys = dict.fromkeys([\"a\", \"b\", \"c\"], 0)\r\n\r\n# Dictionary operations\r\nperson[\"email\"] = \"alice@example.com\"  # Add/update\r\nage = person.get(\"age\", 0)             # Get with default\r\nperson.setdefault(\"country\", \"USA\")    # Set if not exists\r\nperson.update({\"phone\": \"123-456-7890\", \"age\": 31})\r\n\r\n# Dictionary methods\r\nkeys = person.keys()\r\nvalues = person.values()\r\nitems = person.items()\r\n\r\n# Dictionary comprehensions\r\nsquares = {x: x**2 for x in range(5)}\r\nfiltered = {k: v for k, v in person.items() if isinstance(v, str)}\r\n```\r\n\r\n### Sets\r\n\r\n```python\r\n# Set creation\r\nfruits = {\"apple\", \"banana\", \"orange\"}\r\nnumbers = set([1, 2, 3, 4, 5])\r\nempty_set = set()  # Note: {} creates an empty dict\r\n\r\n# Set operations\r\nfruits.add(\"grape\")\r\nfruits.remove(\"banana\")  # KeyError if not found\r\nfruits.discard(\"kiwi\")   # No error if not found\r\n\r\n# Set operations\r\nset1 = {1, 2, 3, 4}\r\nset2 = {3, 4, 5, 6}\r\nunion = set1 | set2           # {1, 2, 3, 4, 5, 6}\r\nintersection = set1 & set2    # {3, 4}\r\ndifference = set1 - set2      # {1, 2}\r\nsymmetric_diff = set1 ^ set2  # {1, 2, 5, 6}\r\n\r\n# Set comprehensions\r\neven_squares = {x**2 for x in range(10) if x % 2 == 0}\r\n```\r\n\r\n---\r\n\r\n## Object-Oriented Programming\r\n\r\n### Classes and Objects\r\n\r\n```python\r\nclass Person:\r\n    # Class variable\r\n    species = \"Homo sapiens\"\r\n\r\n    def __init__(self, name, age):\r\n        # Instance variables\r\n        self.name = name\r\n        self.age = age\r\n\r\n    def introduce(self):\r\n        return f\"Hi, I'm {self.name} and I'm {self.age} years old.\"\r\n\r\n    def have_birthday(self):\r\n        self.age += 1\r\n\r\n    # String representation\r\n    def __str__(self):\r\n        return f\"Person(name='{self.name}', age={self.age})\"\r\n\r\n    def __repr__(self):\r\n        return f\"Person('{self.name}', {self.age})\"\r\n\r\n# Creating objects\r\nperson1 = Person(\"Alice\", 30)\r\nperson2 = Person(\"Bob\", 25)\r\n\r\nprint(person1.introduce())\r\nperson1.have_birthday()\r\nprint(person1)\r\n```\r\n\r\n### Inheritance\r\n\r\n```python\r\nclass Animal:\r\n    def __init__(self, name):\r\n        self.name = name\r\n\r\n    def speak(self):\r\n        pass\r\n\r\n    def info(self):\r\n        return f\"This is {self.name}\"\r\n\r\nclass Dog(Animal):\r\n    def __init__(self, name, breed):\r\n        super().__init__(name)  # Call parent constructor\r\n        self.breed = breed\r\n\r\n    def speak(self):\r\n        return \"Woof!\"\r\n\r\n    def info(self):\r\n        return f\"{super().info()}, a {self.breed}\"\r\n\r\nclass Cat(Animal):\r\n    def speak(self):\r\n        return \"Meow!\"\r\n\r\n# Usage\r\ndog = Dog(\"Buddy\", \"Golden Retriever\")\r\ncat = Cat(\"Whiskers\")\r\n\r\nprint(dog.speak())  # Woof!\r\nprint(cat.speak())  # Meow!\r\nprint(dog.info())   # This is Buddy, a Golden Retriever\r\n```\r\n\r\n### Advanced OOP Concepts\r\n\r\n```python\r\nclass BankAccount:\r\n    def __init__(self, account_number, initial_balance=0):\r\n        self.account_number = account_number\r\n        self._balance = initial_balance  # Protected attribute\r\n        self.__pin = None               # Private attribute\r\n\r\n    @property\r\n    def balance(self):\r\n        \"\"\"Getter for balance\"\"\"\r\n        return self._balance\r\n\r\n    @balance.setter\r\n    def balance(self, amount):\r\n        \"\"\"Setter for balance with validation\"\"\"\r\n        if amount < 0:\r\n            raise ValueError(\"Balance cannot be negative\")\r\n        self._balance = amount\r\n\r\n    def deposit(self, amount):\r\n        if amount > 0:\r\n            self._balance += amount\r\n\r\n    def withdraw(self, amount):\r\n        if 0 < amount <= self._balance:\r\n            self._balance -= amount\r\n            return True\r\n        return False\r\n\r\n    @staticmethod\r\n    def validate_account_number(account_number):\r\n        \"\"\"Static method - doesn't need instance\"\"\"\r\n        return len(account_number) == 10\r\n\r\n    @classmethod\r\n    def create_savings_account(cls, account_number):\r\n        \"\"\"Class method - alternative constructor\"\"\"\r\n        return cls(account_number, 100)  # Savings starts with $100\r\n\r\n# Usage\r\naccount = BankAccount(\"1234567890\", 1000)\r\nprint(account.balance)  # 1000\r\naccount.deposit(500)\r\nprint(account.balance)  # 1500\r\n\r\nsavings = BankAccount.create_savings_account(\"0987654321\")\r\nprint(BankAccount.validate_account_number(\"1234567890\"))  # True\r\n```\r\n\r\n### Abstract Classes and Interfaces\r\n\r\n```python\r\nfrom abc import ABC, abstractmethod\r\n\r\nclass Shape(ABC):\r\n    @abstractmethod\r\n    def area(self):\r\n        pass\r\n\r\n    @abstractmethod\r\n    def perimeter(self):\r\n        pass\r\n\r\nclass Rectangle(Shape):\r\n    def __init__(self, width, height):\r\n        self.width = width\r\n        self.height = height\r\n\r\n    def area(self):\r\n        return self.width * self.height\r\n\r\n    def perimeter(self):\r\n        return 2 * (self.width + self.height)\r\n\r\nclass Circle(Shape):\r\n    def __init__(self, radius):\r\n        self.radius = radius\r\n\r\n    def area(self):\r\n        return 3.14159 * self.radius ** 2\r\n\r\n    def perimeter(self):\r\n        return 2 * 3.14159 * self.radius\r\n\r\n# Usage\r\nrect = Rectangle(5, 3)\r\ncircle = Circle(4)\r\n\r\nprint(f\"Rectangle area: {rect.area()}\")\r\nprint(f\"Circle area: {circle.area()}\")\r\n```\r\n\r\n---\r\n\r\n## Error Handling\r\n\r\n### Try-Except Blocks\r\n\r\n```python\r\n# Basic exception handling\r\ntry:\r\n    result = 10 / 0\r\nexcept ZeroDivisionError:\r\n    print(\"Cannot divide by zero!\")\r\n\r\n# Multiple exceptions\r\ntry:\r\n    value = int(input(\"Enter a number: \"))\r\n    result = 10 / value\r\nexcept ValueError:\r\n    print(\"Invalid input! Please enter a number.\")\r\nexcept ZeroDivisionError:\r\n    print(\"Cannot divide by zero!\")\r\n\r\n# Catching multiple exceptions\r\ntry:\r\n    # Some risky operation\r\n    pass\r\nexcept (ValueError, TypeError) as e:\r\n    print(f\"Error occurred: {e}\")\r\n\r\n# Catching all exceptions\r\ntry:\r\n    # Some risky operation\r\n    pass\r\nexcept Exception as e:\r\n    print(f\"Unexpected error: {e}\")\r\n\r\n# Try-except-else-finally\r\ntry:\r\n    file = open(\"data.txt\", \"r\")\r\nexcept FileNotFoundError:\r\n    print(\"File not found!\")\r\nelse:\r\n    # Executed if no exception occurred\r\n    content = file.read()\r\n    print(\"File read successfully!\")\r\nfinally:\r\n    # Always executed\r\n    if 'file' in locals():\r\n        file.close()\r\n```\r\n\r\n### Custom Exceptions\r\n\r\n```python\r\nclass CustomError(Exception):\r\n    \"\"\"Custom exception class\"\"\"\r\n    pass\r\n\r\nclass ValidationError(Exception):\r\n    \"\"\"Exception for validation errors\"\"\"\r\n    def __init__(self, message, code=None):\r\n        super().__init__(message)\r\n        self.code = code\r\n\r\ndef validate_age(age):\r\n    if age < 0:\r\n        raise ValidationError(\"Age cannot be negative\", code=\"NEGATIVE_AGE\")\r\n    if age > 150:\r\n        raise ValidationError(\"Age seems unrealistic\", code=\"UNREALISTIC_AGE\")\r\n\r\n# Usage\r\ntry:\r\n    validate_age(-5)\r\nexcept ValidationError as e:\r\n    print(f\"Validation error: {e}\")\r\n    print(f\"Error code: {e.code}\")\r\n```\r\n\r\n---\r\n\r\n## File I/O\r\n\r\n### File Operations\r\n\r\n```python\r\n# Reading files\r\nwith open(\"file.txt\", \"r\") as file:\r\n    content = file.read()          # Read entire file\r\n\r\nwith open(\"file.txt\", \"r\") as file:\r\n    lines = file.readlines()       # Read all lines as list\r\n\r\nwith open(\"file.txt\", \"r\") as file:\r\n    for line in file:              # Read line by line\r\n        print(line.strip())\r\n\r\n# Writing files\r\nwith open(\"output.txt\", \"w\") as file:\r\n    file.write(\"Hello, World!\")\r\n\r\nwith open(\"output.txt\", \"a\") as file:  # Append mode\r\n    file.write(\"\\nNew line\")\r\n\r\n# Writing multiple lines\r\nlines = [\"Line 1\\n\", \"Line 2\\n\", \"Line 3\\n\"]\r\nwith open(\"output.txt\", \"w\") as file:\r\n    file.writelines(lines)\r\n\r\n# Binary file operations\r\nwith open(\"image.jpg\", \"rb\") as file:\r\n    binary_data = file.read()\r\n\r\nwith open(\"copy.jpg\", \"wb\") as file:\r\n    file.write(binary_data)\r\n```\r\n\r\n### Working with CSV\r\n\r\n```python\r\nimport csv\r\n\r\n# Reading CSV\r\nwith open(\"data.csv\", \"r\") as file:\r\n    reader = csv.reader(file)\r\n    for row in reader:\r\n        print(row)\r\n\r\n# Reading CSV with headers\r\nwith open(\"data.csv\", \"r\") as file:\r\n    reader = csv.DictReader(file)\r\n    for row in reader:\r\n        print(row[\"name\"], row[\"age\"])\r\n\r\n# Writing CSV\r\ndata = [\r\n    [\"Name\", \"Age\", \"City\"],\r\n    [\"Alice\", 30, \"New York\"],\r\n    [\"Bob\", 25, \"Los Angeles\"]\r\n]\r\n\r\nwith open(\"output.csv\", \"w\", newline=\"\") as file:\r\n    writer = csv.writer(file)\r\n    writer.writerows(data)\r\n\r\n# Writing CSV with DictWriter\r\nfieldnames = [\"name\", \"age\", \"city\"]\r\nwith open(\"output.csv\", \"w\", newline=\"\") as file:\r\n    writer = csv.DictWriter(file, fieldnames=fieldnames)\r\n    writer.writeheader()\r\n    writer.writerow({\"name\": \"Alice\", \"age\": 30, \"city\": \"New York\"})\r\n```\r\n\r\n### JSON Operations\r\n\r\n```python\r\nimport json\r\n\r\n# Reading JSON\r\nwith open(\"data.json\", \"r\") as file:\r\n    data = json.load(file)\r\n\r\n# Writing JSON\r\ndata = {\"name\": \"Alice\", \"age\": 30, \"city\": \"New York\"}\r\nwith open(\"output.json\", \"w\") as file:\r\n    json.dump(data, file, indent=2)\r\n\r\n# JSON string operations\r\njson_string = '{\"name\": \"Alice\", \"age\": 30}'\r\ndata = json.loads(json_string)\r\njson_string = json.dumps(data, indent=2)\r\n```\r\n\r\n---\r\n\r\n## Modules & Packages\r\n\r\n### Importing Modules\r\n\r\n```python\r\n# Different ways to import\r\nimport math\r\nimport math as m\r\nfrom math import sqrt, pi\r\nfrom math import *  # Not recommended\r\n\r\n# Using imported modules\r\nprint(math.sqrt(16))  # 4.0\r\nprint(m.pi)          # 3.141592653589793\r\nprint(sqrt(25))      # 5.0\r\n\r\n# Importing from packages\r\nfrom collections import defaultdict, Counter\r\nfrom datetime import datetime, timedelta\r\n```\r\n\r\n### Creating Modules\r\n\r\n```python\r\n# mymodule.py\r\ndef greet(name):\r\n    return f\"Hello, {name}!\"\r\n\r\ndef add(a, b):\r\n    return a + b\r\n\r\nPI = 3.14159\r\n\r\nif __name__ == \"__main__\":\r\n    # Code that runs only when module is executed directly\r\n    print(\"Module is being run directly\")\r\n```\r\n\r\n### Package Structure\r\n\r\n```\r\nmypackage/\r\n    __init__.py\r\n    module1.py\r\n    module2.py\r\n    subpackage/\r\n        __init__.py\r\n        submodule.py\r\n```\r\n\r\n```python\r\n# __init__.py\r\nfrom .module1 import function1\r\nfrom .module2 import function2\r\n\r\n__all__ = ['function1', 'function2']\r\n```\r\n\r\n---\r\n\r\n## Built-in Functions\r\n\r\n### Essential Built-ins\r\n\r\n```python\r\n# Type and conversion functions\r\nprint(type(42))           # <class 'int'>\r\nprint(isinstance(42, int)) # True\r\nprint(int(\"42\"))          # 42\r\nprint(float(42))          # 42.0\r\nprint(str(42))            # \"42\"\r\nprint(bool(0))            # False\r\n\r\n# Sequence functions\r\nnumbers = [1, 2, 3, 4, 5]\r\nprint(len(numbers))       # 5\r\nprint(max(numbers))       # 5\r\nprint(min(numbers))       # 1\r\nprint(sum(numbers))       # 15\r\nprint(sorted(numbers, reverse=True))  # [5, 4, 3, 2, 1]\r\n\r\n# Range and enumerate\r\nfor i in range(5):\r\n    print(i)\r\n\r\nfor index, value in enumerate([\"a\", \"b\", \"c\"]):\r\n    print(index, value)\r\n\r\n# Zip\r\nnames = [\"Alice\", \"Bob\", \"Charlie\"]\r\nages = [25, 30, 35]\r\nfor name, age in zip(names, ages):\r\n    print(f\"{name} is {age} years old\")\r\n\r\n# Map, filter, reduce\r\nnumbers = [1, 2, 3, 4, 5]\r\nsquared = list(map(lambda x: x**2, numbers))\r\neven = list(filter(lambda x: x % 2 == 0, numbers))\r\n\r\nfrom functools import reduce\r\nproduct = reduce(lambda x, y: x * y, numbers)  # 120\r\n\r\n# Any and all\r\nprint(any([True, False, False]))   # True\r\nprint(all([True, True, False]))    # False\r\n\r\n# Abs, round, pow\r\nprint(abs(-5))        # 5\r\nprint(round(3.14159, 2))  # 3.14\r\nprint(pow(2, 3))      # 8\r\n```\r\n\r\n---\r\n\r\n## List/Dict/Set Comprehensions\r\n\r\n### List Comprehensions\r\n\r\n```python\r\n# Basic list comprehension\r\nsquares = [x**2 for x in range(10)]\r\n# [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\r\n\r\n# With condition\r\neven_squares = [x**2 for x in range(10) if x % 2 == 0]\r\n# [0, 4, 16, 36, 64]\r\n\r\n# Nested comprehensions\r\nmatrix = [[i*j for j in range(3)] for i in range(3)]\r\n# [[0, 0, 0], [0, 1, 2], [0, 2, 4]]\r\n\r\n# Flattening a matrix\r\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\r\nflattened = [num for row in matrix for num in row]\r\n# [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n\r\n# String manipulation\r\nwords = [\"hello\", \"world\", \"python\"]\r\nupper_words = [word.upper() for word in words]\r\n# ['HELLO', 'WORLD', 'PYTHON']\r\n```\r\n\r\n### Dictionary Comprehensions\r\n\r\n```python\r\n# Basic dictionary comprehension\r\nsquares = {x: x**2 for x in range(5)}\r\n# {0: 0, 1: 1, 2: 4, 3: 9, 4: 16}\r\n\r\n# With condition\r\neven_squares = {x: x**2 for x in range(10) if x % 2 == 0}\r\n# {0: 0, 2: 4, 4: 16, 6: 36, 8: 64}\r\n\r\n# From two lists\r\nkeys = [\"a\", \"b\", \"c\"]\r\nvalues = [1, 2, 3]\r\ndict_from_lists = {k: v for k, v in zip(keys, values)}\r\n# {'a': 1, 'b': 2, 'c': 3}\r\n\r\n# Transforming existing dictionary\r\noriginal = {\"a\": 1, \"b\": 2, \"c\": 3}\r\ndoubled = {k: v*2 for k, v in original.items()}\r\n# {'a': 2, 'b': 4, 'c': 6}\r\n```\r\n\r\n### Set Comprehensions\r\n\r\n```python\r\n# Basic set comprehension\r\nunique_squares = {x**2 for x in range(-5, 6)}\r\n# {0, 1, 4, 9, 16, 25}\r\n\r\n# With condition\r\neven_nums = {x for x in range(20) if x % 2 == 0}\r\n# {0, 2, 4, 6, 8, 10, 12, 14, 16, 18}\r\n```\r\n\r\n---\r\n\r\n## Generators & Iterators\r\n\r\n### Generators\r\n\r\n```python\r\n# Generator function\r\ndef count_up_to(max_count):\r\n    count = 1\r\n    while count <= max_count:\r\n        yield count\r\n        count += 1\r\n\r\n# Using generator\r\ncounter = count_up_to(3)\r\nfor num in counter:\r\n    print(num)  # 1, 2, 3\r\n\r\n# Generator expression\r\nsquares = (x**2 for x in range(10))\r\nprint(next(squares))  # 0\r\nprint(next(squares))  # 1\r\n\r\n# Infinite generator\r\ndef fibonacci():\r\n    a, b = 0, 1\r\n    while True:\r\n        yield a\r\n        a, b = b, a + b\r\n\r\nfib = fibonacci()\r\nfor _ in range(10):\r\n    print(next(fib))  # First 10 Fibonacci numbers\r\n```\r\n\r\n### Iterators\r\n\r\n```python\r\n# Custom iterator\r\nclass CountDown:\r\n    def __init__(self, start):\r\n        self.start = start\r\n\r\n    def __iter__(self):\r\n        return self\r\n\r\n    def __next__(self):\r\n        if self.start <= 0:\r\n            raise StopIteration\r\n        self.start -= 1\r\n        return self.start + 1\r\n\r\n# Usage\r\ncountdown = CountDown(3)\r\nfor num in countdown:\r\n    print(num)  # 3, 2, 1\r\n\r\n# Using itertools\r\nimport itertools\r\n\r\n# Infinite iterators\r\ncounter = itertools.count(1, 2)  # 1, 3, 5, 7, ...\r\nrepeater = itertools.repeat(\"hello\", 3)  # \"hello\", \"hello\", \"hello\"\r\n\r\n# Finite iterators\r\nnumbers = [1, 2, 3, 4, 5]\r\naccumulated = list(itertools.accumulate(numbers))  # [1, 3, 6, 10, 15]\r\ncombinations = list(itertools.combinations(numbers, 2))  # [(1, 2), (1, 3), ...]\r\n```\r\n\r\n---\r\n\r\n## Decorators\r\n\r\n### Basic Decorators\r\n\r\n```python\r\n# Simple decorator\r\ndef my_decorator(func):\r\n    def wrapper():\r\n        print(\"Something is happening before the function is called.\")\r\n        func()\r\n        print(\"Something is happening after the function is called.\")\r\n    return wrapper\r\n\r\n@my_decorator\r\ndef say_hello():\r\n    print(\"Hello!\")\r\n\r\n# Equivalent to: say_hello = my_decorator(say_hello)\r\nsay_hello()\r\n\r\n# Decorator with arguments\r\ndef my_decorator(func):\r\n    def wrapper(*args, **kwargs):\r\n        print(f\"Calling {func.__name__}\")\r\n        result = func(*args, **kwargs)\r\n        print(f\"Finished calling {func.__name__}\")\r\n        return result\r\n    return wrapper\r\n\r\n@my_decorator\r\ndef add(a, b):\r\n    return a + b\r\n\r\nresult = add(5, 3)\r\n```\r\n\r\n### Advanced Decorators\r\n\r\n```python\r\nimport functools\r\nimport time\r\n\r\n# Decorator with parameters\r\ndef repeat(times):\r\n    def decorator(func):\r\n        @functools.wraps(func)\r\n        def wrapper(*args, **kwargs):\r\n            for _ in range(times):\r\n                result = func(*args, **kwargs)\r\n            return result\r\n        return wrapper\r\n    return decorator\r\n\r\n@repeat(3)\r\ndef greet(name):\r\n    print(f\"Hello, {name}!\")\r\n\r\n# Timing decorator\r\ndef timing_decorator(func):\r\n    @functools.wraps(func)\r\n    def wrapper(*args, **kwargs):\r\n        start_time = time.time()\r\n        result = func(*args, **kwargs)\r\n        end_time = time.time()\r\n        print(f\"{func.__name__} took {end_time - start_time:.4f} seconds\")\r\n        return result\r\n    return wrapper\r\n\r\n@timing_decorator\r\ndef slow_function():\r\n    time.sleep(1)\r\n    return \"Done\"\r\n\r\n# Class-based decorator\r\nclass CallCounter:\r\n    def __init__(self, func):\r\n        self.func = func\r\n        self.count = 0\r\n\r\n    def __call__(self, *args, **kwargs):\r\n        self.count += 1\r\n        print(f\"{self.func.__name__} has been called {self.count} times\")\r\n        return self.func(*args, **kwargs)\r\n\r\n@CallCounter\r\ndef say_hello():\r\n    print(\"Hello!\")\r\n\r\n# Property decorator\r\nclass Circle:\r\n    def __init__(self, radius):\r\n        self._radius = radius\r\n\r\n    @property\r\n    def radius(self):\r\n        return self._radius\r\n\r\n    @radius.setter\r\n    def radius(self, value):\r\n        if value < 0:\r\n            raise ValueError(\"Radius cannot be negative\")\r\n        self._radius = value\r\n\r\n    @property\r\n    def area(self):\r\n        return 3.14159 * self._radius ** 2\r\n```\r\n\r\n---\r\n\r\n## Context Managers\r\n\r\n### Using Context Managers\r\n\r\n```python\r\n# File handling with context manager\r\nwith open(\"file.txt\", \"r\") as file:\r\n    content = file.read()\r\n# File is automatically closed\r\n\r\n# Multiple context managers\r\nwith open(\"input.txt\", \"r\") as infile, open(\"output.txt\", \"w\") as outfile:\r\n    content = infile.read()\r\n    outfile.write(content.upper())\r\n```\r\n\r\n### Creating Context Managers\r\n\r\n```python\r\n# Using contextlib\r\nfrom contextlib import contextmanager\r\n\r\n@contextmanager\r\ndef my_context():\r\n    print(\"Entering context\")\r\n    try:\r\n        yield \"Hello from context\"\r\n    finally:\r\n        print(\"Exiting context\")\r\n\r\nwith my_context() as value:\r\n    print(value)\r\n\r\n# Class-based context manager\r\nclass DatabaseConnection:\r\n    def __init__(self, host, port):\r\n        self.host = host\r\n        self.port = port\r\n        self.connection = None\r\n\r\n    def __enter__(self):\r\n        print(f\"Connecting to {self.host}:{self.port}\")\r\n        self.connection = f\"Connected to {self.host}:{self.port}\"\r\n        return self.connection\r\n\r\n    def __exit__(self, exc_type, exc_val, exc_tb):\r\n        print(\"Closing database connection\")\r\n        self.connection = None\r\n\r\n# Usage\r\nwith DatabaseConnection(\"localhost\", 5432) as conn:\r\n    print(f\"Using connection: {conn}\")\r\n\r\n# Context manager for timing\r\n@contextmanager\r\ndef timer():\r\n    start = time.time()\r\n    try:\r\n        yield\r\n    finally:\r\n        end = time.time()\r\n        print(f\"Execution took {end - start:.4f} seconds\")\r\n\r\nwith timer():\r\n    # Some time-consuming operation\r\n    sum(range(1000000))\r\n```\r\n\r\n---\r\n\r\n## Regular Expressions\r\n\r\n### Basic Regex Operations\r\n\r\n```python\r\nimport re\r\n\r\n# Basic matching\r\ntext = \"Hello, World! My phone number is 123-456-7890.\"\r\npattern = r\"\\d{3}-\\d{3}-\\d{4}\"\r\nmatch = re.search(pattern, text)\r\nif match:\r\n    print(f\"Found: {match.group()}\")  # Found: 123-456-7890\r\n\r\n# Finding all matches\r\ntext = \"Email me at john@example.com or jane@test.org\"\r\npattern = r\"\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b\"\r\nemails = re.findall(pattern, text)\r\nprint(emails)  # ['john@example.com', 'jane@test.org']\r\n\r\n# Substitution\r\ntext = \"The price is $100 and the tax is $10\"\r\npattern = r\"\\$(\\d+)\"\r\nnew_text = re.sub(pattern, r\"£\\1\", text)\r\nprint(new_text)  # The price is £100 and the tax is £10\r\n\r\n# Splitting\r\ntext = \"apple,banana;orange:grape\"\r\nfruits = re.split(r\"[,;:]\", text)\r\nprint(fruits)  # ['apple', 'banana', 'orange', 'grape']\r\n```\r\n\r\n### Advanced Regex\r\n\r\n```python\r\n# Compiled patterns (more efficient for repeated use)\r\npattern = re.compile(r\"\\d+\")\r\nmatches = pattern.findall(\"I have 5 apples and 3 oranges\")\r\nprint(matches)  # ['5', '3']\r\n\r\n# Groups and capturing\r\ntext = \"John Smith (age 30) and Jane Doe (age 25)\"\r\npattern = r\"(\\w+) (\\w+) \\(age (\\d+)\\)\"\r\nmatches = re.findall(pattern, text)\r\nfor match in matches:\r\n    first, last, age = match\r\n    print(f\"{first} {last} is {age} years old\")\r\n\r\n# Named groups\r\npattern = r\"(?P<first>\\w+) (?P<last>\\w+) \\(age (?P<age>\\d+)\\)\"\r\nfor match in re.finditer(pattern, text):\r\n    print(f\"{match.group('first')} {match.group('last')} is {match.group('age')}\")\r\n\r\n# Lookahead and lookbehind\r\ntext = \"password123, password456, pass123\"\r\n# Positive lookahead: match \"password\" only if followed by digits\r\npattern = r\"password(?=\\d+)\"\r\nmatches = re.findall(pattern, text)\r\nprint(matches)  # ['password', 'password']\r\n\r\n# Common regex patterns\r\npatterns = {\r\n    \"email\": r\"\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b\",\r\n    \"phone\": r\"\\b\\d{3}-\\d{3}-\\d{4}\\b\",\r\n    \"url\": r\"https?://(?:[-\\w.])+(?:\\:[0-9]+)?(?:/(?:[\\w/_.])*(?:\\?(?:[\\w&=%.])*)?(?:\\#(?:[\\w.])*)?)?\",\r\n    \"ip_address\": r\"\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b\",\r\n    \"credit_card\": r\"\\b\\d{4}[- ]?\\d{4}[- ]?\\d{4}[- ]?\\d{4}\\b\",\r\n    \"date\": r\"\\b\\d{1,2}[/-]\\d{1,2}[/-]\\d{2,4}\\b\"\r\n}\r\n```\r\n\r\n---\r\n\r\n## Testing\r\n\r\n### Unit Testing with unittest\r\n\r\n```python\r\nimport unittest\r\n\r\ndef add(a, b):\r\n    return a + b\r\n\r\ndef divide(a, b):\r\n    if b == 0:\r\n        raise ValueError(\"Cannot divide by zero\")\r\n    return a / b\r\n\r\nclass TestMathFunctions(unittest.TestCase):\r\n\r\n    def test_add(self):\r\n        self.assertEqual(add(2, 3), 5)\r\n        self.assertEqual(add(-1, 1), 0)\r\n        self.assertEqual(add(0, 0), 0)\r\n\r\n    def test_divide(self):\r\n        self.assertEqual(divide(10, 2), 5)\r\n        self.assertEqual(divide(9, 3), 3)\r\n\r\n        # Test exception\r\n        with self.assertRaises(ValueError):\r\n            divide(10, 0)\r\n\r\n    def setUp(self):\r\n        \"\"\"Run before each test method\"\"\"\r\n        self.test_data = [1, 2, 3, 4, 5]\r\n\r\n    def tearDown(self):\r\n        \"\"\"Run after each test method\"\"\"\r\n        pass\r\n\r\n    def test_list_operations(self):\r\n        self.assertIn(3, self.test_data)\r\n        self.assertNotIn(10, self.test_data)\r\n        self.assertEqual(len(self.test_data), 5)\r\n\r\nif __name__ == \"__main__\":\r\n    unittest.main()\r\n```\r\n\r\n### Testing with pytest\r\n\r\n```python\r\nimport pytest\r\n\r\ndef test_add():\r\n    assert add(2, 3) == 5\r\n    assert add(-1, 1) == 0\r\n\r\ndef test_divide():\r\n    assert divide(10, 2) == 5\r\n    assert divide(9, 3) == 3\r\n\r\n    with pytest.raises(ValueError):\r\n        divide(10, 0)\r\n\r\n# Fixtures\r\n@pytest.fixture\r\ndef sample_data():\r\n    return [1, 2, 3, 4, 5]\r\n\r\ndef test_with_fixture(sample_data):\r\n    assert len(sample_data) == 5\r\n    assert 3 in sample_data\r\n\r\n# Parametrized tests\r\n@pytest.mark.parametrize(\"a,b,expected\", [\r\n    (2, 3, 5),\r\n    (-1, 1, 0),\r\n    (0, 0, 0),\r\n])\r\ndef test_add_parametrized(a, b, expected):\r\n    assert add(a, b) == expected\r\n```\r\n\r\n### Mocking\r\n\r\n```python\r\nfrom unittest.mock import Mock, patch\r\n\r\n# Mock object\r\nmock_obj = Mock()\r\nmock_obj.method.return_value = \"mocked result\"\r\nresult = mock_obj.method()\r\nprint(result)  # mocked result\r\n\r\n# Patching\r\nimport requests\r\n\r\ndef get_user_data(user_id):\r\n    response = requests.get(f\"https://api.example.com/users/{user_id}\")\r\n    return response.json()\r\n\r\n# Test with mock\r\n@patch('requests.get')\r\ndef test_get_user_data(mock_get):\r\n    mock_response = Mock()\r\n    mock_response.json.return_value = {\"name\": \"John\", \"id\": 123}\r\n    mock_get.return_value = mock_response\r\n\r\n    result = get_user_data(123)\r\n    assert result[\"name\"] == \"John\"\r\n    mock_get.assert_called_once_with(\"https://api.example.com/users/123\")\r\n```\r\n\r\n---\r\n\r\n## Performance & Optimization\r\n\r\n### Measuring Performance\r\n\r\n```python\r\nimport time\r\nimport timeit\r\nfrom functools import wraps\r\n\r\n# Simple timing\r\nstart = time.time()\r\n# Some operation\r\nsum(range(1000000))\r\nend = time.time()\r\nprint(f\"Execution time: {end - start:.4f} seconds\")\r\n\r\n# Using timeit\r\nexecution_time = timeit.timeit(lambda: sum(range(1000)), number=10000)\r\nprint(f\"Average execution time: {execution_time/10000:.6f} seconds\")\r\n\r\n# Profiling decorator\r\ndef profile(func):\r\n    @wraps(func)\r\n    def wrapper(*args, **kwargs):\r\n        start = time.time()\r\n        result = func(*args, **kwargs)\r\n        end = time.time()\r\n        print(f\"{func.__name__} took {end - start:.4f} seconds\")\r\n        return result\r\n    return wrapper\r\n\r\n@profile\r\ndef slow_function():\r\n    return sum(range(1000000))\r\n```\r\n\r\n### Memory Optimization\r\n\r\n```python\r\nimport sys\r\nfrom collections import deque\r\n\r\n# Check memory usage\r\nnumbers = [1, 2, 3, 4, 5]\r\nprint(f\"Size of list: {sys.getsizeof(numbers)} bytes\")\r\n\r\n# Use generators for large datasets\r\ndef large_dataset():\r\n    for i in range(1000000):\r\n        yield i * 2\r\n\r\n# Memory-efficient operations\r\n# Use deque for frequent insertions/deletions at both ends\r\nd = deque([1, 2, 3, 4, 5])\r\nd.appendleft(0)  # O(1) operation\r\nd.pop()          # O(1) operation\r\n\r\n# Use __slots__ to reduce memory usage in classes\r\nclass Point:\r\n    __slots__ = ['x', 'y']\r\n\r\n    def __init__(self, x, y):\r\n        self.x = x\r\n        self.y = y\r\n\r\n# String concatenation optimization\r\n# Bad: O(n²) complexity\r\nresult = \"\"\r\nfor i in range(1000):\r\n    result += str(i)\r\n\r\n# Good: O(n) complexity\r\nresult = \"\".join(str(i) for i in range(1000))\r\n```\r\n\r\n### Algorithm Optimization\r\n\r\n```python\r\nimport bisect\r\nfrom collections import Counter, defaultdict\r\n\r\n# Use set for membership testing (O(1) vs O(n))\r\nlarge_list = list(range(10000))\r\nlarge_set = set(large_list)\r\n\r\n# Slow: O(n)\r\nif 5000 in large_list:\r\n    pass\r\n\r\n# Fast: O(1)\r\nif 5000 in large_set:\r\n    pass\r\n\r\n# Use bisect for sorted lists\r\nsorted_list = [1, 3, 5, 7, 9, 11, 13, 15]\r\nindex = bisect.bisect_left(sorted_list, 7)  # O(log n)\r\n\r\n# Use Counter for counting\r\nitems = [\"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\"]\r\ncount = Counter(items)\r\nprint(count.most_common(2))  # [('apple', 3), ('banana', 2)]\r\n\r\n# Use defaultdict to avoid key checks\r\ndd = defaultdict(list)\r\ndd['key'].append('value')  # No need to check if key exists\r\n```\r\n\r\n---\r\n\r\n## Professional Best Practices\r\n\r\n### Code Organization\r\n\r\n```python\r\n# Module structure\r\n\"\"\"\r\nModule docstring explaining the purpose of the module.\r\n\"\"\"\r\n\r\n__version__ = \"1.0.0\"\r\n__author__ = \"Your Name\"\r\n__email__ = \"your.email@example.com\"\r\n\r\n# Standard library imports\r\nimport os\r\nimport sys\r\nfrom datetime import datetime\r\n\r\n# Third-party imports\r\nimport requests\r\nimport numpy as np\r\n\r\n# Local imports\r\nfrom .utils import helper_function\r\nfrom .models import User\r\n\r\n# Constants\r\nDEFAULT_TIMEOUT = 30\r\nMAX_RETRIES = 3\r\n\r\n# Module-level variables\r\nlogger = logging.getLogger(__name__)\r\n\r\nclass MyClass:\r\n    \"\"\"Class docstring.\"\"\"\r\n\r\n    def __init__(self):\r\n        \"\"\"Initialize the class.\"\"\"\r\n        pass\r\n\r\n    def public_method(self):\r\n        \"\"\"Public method docstring.\"\"\"\r\n        return self._private_method()\r\n\r\n    def _private_method(self):\r\n        \"\"\"Private method (convention).\"\"\"\r\n        return \"private\"\r\n\r\ndef main():\r\n    \"\"\"Main function.\"\"\"\r\n    pass\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n```\r\n\r\n### Error Handling Best Practices\r\n\r\n```python\r\nimport logging\r\n\r\n# Set up logging\r\nlogging.basicConfig(level=logging.INFO)\r\nlogger = logging.getLogger(__name__)\r\n\r\ndef robust_function(data):\r\n    \"\"\"\r\n    A function that handles errors gracefully.\r\n\r\n    Args:\r\n        data: Input data to process\r\n\r\n    Returns:\r\n        Processed data\r\n\r\n    Raises:\r\n        ValueError: If data is invalid\r\n        TypeError: If data is wrong type\r\n    \"\"\"\r\n    if not isinstance(data, (list, tuple)):\r\n        raise TypeError(\"Data must be a list or tuple\")\r\n\r\n    if not data:\r\n        raise ValueError(\"Data cannot be empty\")\r\n\r\n    try:\r\n        result = process_data(data)\r\n        logger.info(f\"Successfully processed {len(data)} items\")\r\n        return result\r\n    except Exception as e:\r\n        logger.error(f\"Error processing data: {e}\")\r\n        raise\r\n    finally:\r\n        # Cleanup code here\r\n        pass\r\n\r\ndef process_data(data):\r\n    \"\"\"Process the data.\"\"\"\r\n    return [item * 2 for item in data]\r\n\r\n# Configuration management\r\nclass Config:\r\n    \"\"\"Configuration class.\"\"\"\r\n\r\n    def __init__(self):\r\n        self.debug = os.getenv(\"DEBUG\", \"False\").lower() == \"true\"\r\n        self.database_url = os.getenv(\"DATABASE_URL\", \"sqlite:///default.db\")\r\n        self.api_key = os.getenv(\"API_KEY\")\r\n\r\n        if not self.api_key:\r\n            raise ValueError(\"API_KEY environment variable is required\")\r\n\r\nconfig = Config()\r\n```\r\n\r\n### Type Hints and Documentation\r\n\r\n```python\r\nfrom typing import List, Dict, Optional, Union, Callable, Any\r\nfrom dataclasses import dataclass\r\nfrom enum import Enum\r\n\r\nclass Status(Enum):\r\n    \"\"\"Status enumeration.\"\"\"\r\n    PENDING = \"pending\"\r\n    PROCESSING = \"processing\"\r\n    COMPLETED = \"completed\"\r\n    FAILED = \"failed\"\r\n\r\n@dataclass\r\nclass User:\r\n    \"\"\"User data class.\"\"\"\r\n    id: int\r\n    name: str\r\n    email: str\r\n    age: Optional[int] = None\r\n    is_active: bool = True\r\n\r\ndef process_users(\r\n    users: List[User],\r\n    filter_func: Optional[Callable[[User], bool]] = None,\r\n    sort_key: Optional[str] = None\r\n) -> Dict[str, Any]:\r\n    \"\"\"\r\n    Process a list of users.\r\n\r\n    Args:\r\n        users: List of User objects to process\r\n        filter_func: Optional function to filter users\r\n        sort_key: Optional attribute name to sort by\r\n\r\n    Returns:\r\n        Dictionary containing processing results\r\n\r\n    Example:\r\n        >>> users = [User(1, \"Alice\", \"alice@example.com\")]\r\n        >>> result = process_users(users, sort_key=\"name\")\r\n        >>> print(result[\"count\"])\r\n        1\r\n    \"\"\"\r\n    if filter_func:\r\n        users = [user for user in users if filter_func(user)]\r\n\r\n    if sort_key:\r\n        users.sort(key=lambda u: getattr(u, sort_key))\r\n\r\n    return {\r\n        \"count\": len(users),\r\n        \"users\": users,\r\n        \"processed_at\": datetime.now().isoformat()\r\n    }\r\n\r\n# Generic type hints\r\nfrom typing import TypeVar, Generic\r\n\r\nT = TypeVar('T')\r\n\r\nclass Stack(Generic[T]):\r\n    \"\"\"Generic stack implementation.\"\"\"\r\n\r\n    def __init__(self) -> None:\r\n        self._items: List[T] = []\r\n\r\n    def push(self, item: T) -> None:\r\n        \"\"\"Push an item onto the stack.\"\"\"\r\n        self._items.append(item)\r\n\r\n    def pop(self) -> T:\r\n        \"\"\"Pop an item from the stack.\"\"\"\r\n        if not self._items:\r\n            raise IndexError(\"Stack is empty\")\r\n        return self._items.pop()\r\n\r\n    def peek(self) -> T:\r\n        \"\"\"Peek at the top item without removing it.\"\"\"\r\n        if not self._items:\r\n            raise IndexError(\"Stack is empty\")\r\n        return self._items[-1]\r\n```\r\n\r\n---\r\n\r\n## Code Style & Standards\r\n\r\n### PEP 8 Guidelines\r\n\r\n```python\r\n# Good naming conventions\r\nclass UserManager:  # PascalCase for classes\r\n    def __init__(self):\r\n        self.user_count = 0  # snake_case for variables\r\n        self._private_attr = None  # Leading underscore for private\r\n        self.__very_private = None  # Double underscore for name mangling\r\n\r\n    def get_user_by_id(self, user_id):  # snake_case for functions\r\n        \"\"\"Get user by ID.\"\"\"\r\n        pass\r\n\r\n    def _helper_method(self):  # Private method\r\n        \"\"\"Helper method.\"\"\"\r\n        pass\r\n\r\n# Constants\r\nMAX_CONNECTIONS = 100\r\nDEFAULT_TIMEOUT = 30\r\n\r\n# Good spacing and formatting\r\ndef calculate_total(items, tax_rate=0.1, discount=0.0):\r\n    \"\"\"Calculate total with tax and discount.\"\"\"\r\n    subtotal = sum(item.price for item in items)\r\n    discount_amount = subtotal * discount\r\n    taxable_amount = subtotal - discount_amount\r\n    tax_amount = taxable_amount * tax_rate\r\n    total = taxable_amount + tax_amount\r\n\r\n    return {\r\n        'subtotal': subtotal,\r\n        'discount': discount_amount,\r\n        'tax': tax_amount,\r\n        'total': total\r\n    }\r\n\r\n# Line length and formatting\r\nvery_long_variable_name = some_function_with_a_very_long_name(\r\n    first_argument,\r\n    second_argument,\r\n    third_argument,\r\n    fourth_argument\r\n)\r\n\r\n# List formatting\r\nitems = [\r\n    'first_item',\r\n    'second_item',\r\n    'third_item',\r\n    'fourth_item',\r\n]\r\n\r\n# Dictionary formatting\r\nconfig = {\r\n    'database_url': 'postgresql://localhost/mydb',\r\n    'redis_url': 'redis://localhost:6379',\r\n    'debug': True,\r\n    'max_connections': 100,\r\n}\r\n```\r\n\r\n### Code Quality Tools\r\n\r\n```python\r\n# Using black for formatting\r\n# pip install black\r\n# black my_file.py\r\n\r\n# Using flake8 for linting\r\n# pip install flake8\r\n# flake8 my_file.py\r\n\r\n# Using mypy for type checking\r\n# pip install mypy\r\n# mypy my_file.py\r\n\r\n# Using isort for import sorting\r\n# pip install isort\r\n# isort my_file.py\r\n\r\n# Configuration in pyproject.toml\r\n\"\"\"\r\n[tool.black]\r\nline-length = 88\r\ntarget-version = ['py39']\r\n\r\n[tool.isort]\r\nprofile = \"black\"\r\nmulti_line_output = 3\r\n\r\n[tool.mypy]\r\npython_version = \"3.9\"\r\nwarn_return_any = true\r\nwarn_unused_configs = true\r\ndisallow_untyped_defs = true\r\n\"\"\"\r\n```\r\n\r\n---\r\n\r\n## Advanced Topics\r\n\r\n### Metaclasses\r\n\r\n```python\r\nclass SingletonMeta(type):\r\n    \"\"\"Metaclass that creates a Singleton base class.\"\"\"\r\n    _instances = {}\r\n\r\n    def __call__(cls, *args, **kwargs):\r\n        if cls not in cls._instances:\r\n            cls._instances[cls] = super().__call__(*args, **kwargs)\r\n        return cls._instances[cls]\r\n\r\nclass DatabaseConnection(metaclass=SingletonMeta):\r\n    \"\"\"Singleton database connection.\"\"\"\r\n\r\n    def __init__(self):\r\n        self.connection = \"Connected to database\"\r\n\r\n# Usage\r\ndb1 = DatabaseConnection()\r\ndb2 = DatabaseConnection()\r\nprint(db1 is db2)  # True\r\n```\r\n\r\n### Descriptors\r\n\r\n```python\r\nclass ValidatedAttribute:\r\n    \"\"\"Descriptor that validates attribute values.\"\"\"\r\n\r\n    def __init__(self, validator):\r\n        self.validator = validator\r\n        self.name = None\r\n\r\n    def __set_name__(self, owner, name):\r\n        self.name = name\r\n\r\n    def __get__(self, instance, owner):\r\n        if instance is None:\r\n            return self\r\n        return instance.__dict__.get(self.name)\r\n\r\n    def __set__(self, instance, value):\r\n        if not self.validator(value):\r\n            raise ValueError(f\"Invalid value for {self.name}: {value}\")\r\n        instance.__dict__[self.name] = value\r\n\r\nclass Person:\r\n    name = ValidatedAttribute(lambda x: isinstance(x, str) and len(x) > 0)\r\n    age = ValidatedAttribute(lambda x: isinstance(x, int) and 0 <= x <= 150)\r\n\r\n    def __init__(self, name, age):\r\n        self.name = name\r\n        self.age = age\r\n\r\n# Usage\r\nperson = Person(\"Alice\", 30)\r\n# person.age = -5  # Raises ValueError\r\n```\r\n\r\n### Async Programming\r\n\r\n```python\r\nimport asyncio\r\nimport aiohttp\r\n\r\nasync def fetch_url(session, url):\r\n    \"\"\"Fetch a single URL.\"\"\"\r\n    async with session.get(url) as response:\r\n        return await response.text()\r\n\r\nasync def fetch_multiple_urls(urls):\r\n    \"\"\"Fetch multiple URLs concurrently.\"\"\"\r\n    async with aiohttp.ClientSession() as session:\r\n        tasks = [fetch_url(session, url) for url in urls]\r\n        results = await asyncio.gather(*tasks)\r\n        return results\r\n\r\n# Generator-based coroutines\r\nasync def async_generator():\r\n    \"\"\"Async generator example.\"\"\"\r\n    for i in range(5):\r\n        await asyncio.sleep(0.1)\r\n        yield i\r\n\r\nasync def main():\r\n    \"\"\"Main async function.\"\"\"\r\n    # Using async generator\r\n    async for value in async_generator():\r\n        print(value)\r\n\r\n    # Concurrent execution\r\n    urls = [\"http://example.com\", \"http://google.com\"]\r\n    results = await fetch_multiple_urls(urls)\r\n    print(f\"Fetched {len(results)} URLs\")\r\n\r\n# Run async code\r\n# asyncio.run(main())\r\n```\r\n\r\n### Data Classes and Enums\r\n\r\n```python\r\nfrom dataclasses import dataclass, field\r\nfrom enum import Enum, auto\r\nfrom typing import List\r\nimport json\r\n\r\nclass Priority(Enum):\r\n    LOW = 1\r\n    MEDIUM = 2\r\n    HIGH = 3\r\n\r\nclass Status(Enum):\r\n    TODO = auto()\r\n    IN_PROGRESS = auto()\r\n    DONE = auto()\r\n\r\n@dataclass\r\nclass Task:\r\n    title: str\r\n    description: str = \"\"\r\n    priority: Priority = Priority.MEDIUM\r\n    status: Status = Status.TODO\r\n    tags: List[str] = field(default_factory=list)\r\n\r\n    def __post_init__(self):\r\n        \"\"\"Called after initialization.\"\"\"\r\n        if not self.title:\r\n            raise ValueError(\"Title cannot be empty\")\r\n\r\n    def to_dict(self):\r\n        \"\"\"Convert to dictionary.\"\"\"\r\n        return {\r\n            'title': self.title,\r\n            'description': self.description,\r\n            'priority': self.priority.value,\r\n            'status': self.status.name,\r\n            'tags': self.tags\r\n        }\r\n\r\n# Usage\r\ntask = Task(\r\n    title=\"Learn Python\",\r\n    description=\"Complete Python tutorial\",\r\n    priority=Priority.HIGH,\r\n    tags=[\"learning\", \"python\"]\r\n)\r\n\r\nprint(task.to_dict())\r\n```\r\n\r\n### Working with APIs\r\n\r\n```python\r\nimport requests\r\nfrom requests.adapters import HTTPAdapter\r\nfrom requests.packages.urllib3.util.retry import Retry\r\n\r\nclass APIClient:\r\n    \"\"\"Robust API client with retry logic.\"\"\"\r\n\r\n    def __init__(self, base_url, api_key):\r\n        self.base_url = base_url\r\n        self.session = requests.Session()\r\n\r\n        # Set up retry strategy\r\n        retry_strategy = Retry(\r\n            total=3,\r\n            backoff_factor=1,\r\n            status_forcelist=[429, 500, 502, 503, 504],\r\n        )\r\n\r\n        adapter = HTTPAdapter(max_retries=retry_strategy)\r\n        self.session.mount(\"http://\", adapter)\r\n        self.session.mount(\"https://\", adapter)\r\n\r\n        # Set default headers\r\n        self.session.headers.update({\r\n            'Authorization': f'Bearer {api_key}',\r\n            'Content-Type': 'application/json',\r\n            'User-Agent': 'MyApp/1.0'\r\n        })\r\n\r\n    def get(self, endpoint, params=None):\r\n        \"\"\"Make GET request.\"\"\"\r\n        url = f\"{self.base_url}/{endpoint}\"\r\n        response = self.session.get(url, params=params)\r\n        response.raise_for_status()\r\n        return response.json()\r\n\r\n    def post(self, endpoint, data=None):\r\n        \"\"\"Make POST request.\"\"\"\r\n        url = f\"{self.base_url}/{endpoint}\"\r\n        response = self.session.post(url, json=data)\r\n        response.raise_for_status()\r\n        return response.json()\r\n\r\n# Usage\r\nclient = APIClient(\"https://api.example.com\", \"your-api-key\")\r\nusers = client.get(\"users\", params={\"limit\": 10})\r\n```\r\n\r\n### Database Operations\r\n\r\n```python\r\nimport sqlite3\r\nfrom contextlib import contextmanager\r\n\r\nclass DatabaseManager:\r\n    \"\"\"Database manager with context manager support.\"\"\"\r\n\r\n    def __init__(self, db_path):\r\n        self.db_path = db_path\r\n        self.init_database()\r\n\r\n    def init_database(self):\r\n        \"\"\"Initialize database tables.\"\"\"\r\n        with self.get_connection() as conn:\r\n            conn.execute('''\r\n                CREATE TABLE IF NOT EXISTS users (\r\n                    id INTEGER PRIMARY KEY,\r\n                    name TEXT NOT NULL,\r\n                    email TEXT UNIQUE NOT NULL,\r\n                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\r\n                )\r\n            ''')\r\n\r\n    @contextmanager\r\n    def get_connection(self):\r\n        \"\"\"Context manager for database connections.\"\"\"\r\n        conn = sqlite3.connect(self.db_path)\r\n        conn.row_factory = sqlite3.Row  # Enable column access by name\r\n        try:\r\n            yield conn\r\n        except Exception:\r\n            conn.rollback()\r\n            raise\r\n        else:\r\n            conn.commit()\r\n        finally:\r\n            conn.close()\r\n\r\n    def create_user(self, name, email):\r\n        \"\"\"Create a new user.\"\"\"\r\n        with self.get_connection() as conn:\r\n            cursor = conn.execute(\r\n                'INSERT INTO users (name, email) VALUES (?, ?)',\r\n                (name, email)\r\n            )\r\n            return cursor.lastrowid\r\n\r\n    def get_user(self, user_id):\r\n        \"\"\"Get user by ID.\"\"\"\r\n        with self.get_connection() as conn:\r\n            cursor = conn.execute(\r\n                'SELECT * FROM users WHERE id = ?',\r\n                (user_id,)\r\n            )\r\n            row = cursor.fetchone()\r\n            return dict(row) if row else None\r\n\r\n# Usage\r\ndb = DatabaseManager(\"users.db\")\r\nuser_id = db.create_user(\"Alice\", \"alice@example.com\")\r\nuser = db.get_user(user_id)\r\n```\r\n\r\n---\r\n\r\n## Quick Reference\r\n\r\n### Common Patterns\r\n\r\n```python\r\n# Singleton pattern\r\nclass Singleton:\r\n    _instance = None\r\n\r\n    def __new__(cls):\r\n        if cls._instance is None:\r\n            cls._instance = super().__new__(cls)\r\n        return cls._instance\r\n\r\n# Factory pattern\r\nclass ShapeFactory:\r\n    @staticmethod\r\n    def create_shape(shape_type, **kwargs):\r\n        if shape_type == \"circle\":\r\n            return Circle(kwargs[\"radius\"])\r\n        elif shape_type == \"rectangle\":\r\n            return Rectangle(kwargs[\"width\"], kwargs[\"height\"])\r\n        else:\r\n            raise ValueError(f\"Unknown shape type: {shape_type}\")\r\n\r\n# Observer pattern\r\nclass Observable:\r\n    def __init__(self):\r\n        self._observers = []\r\n\r\n    def attach(self, observer):\r\n        self._observers.append(observer)\r\n\r\n    def detach(self, observer):\r\n        self._observers.remove(observer)\r\n\r\n    def notify(self, event):\r\n        for observer in self._observers:\r\n            observer.update(event)\r\n\r\n# Chain of responsibility\r\nclass Handler:\r\n    def __init__(self, successor=None):\r\n        self.successor = successor\r\n\r\n    def handle(self, request):\r\n        if self.can_handle(request):\r\n            return self.process(request)\r\n        elif self.successor:\r\n            return self.successor.handle(request)\r\n        else:\r\n            raise ValueError(\"No handler available\")\r\n\r\n    def can_handle(self, request):\r\n        raise NotImplementedError\r\n\r\n    def process(self, request):\r\n        raise NotImplementedError\r\n```\r\n\r\n### Performance Tips\r\n\r\n```python\r\n# Use local variables in loops\r\ndef slow_function():\r\n    for i in range(1000):\r\n        math.sqrt(i)  # Global lookup\r\n\r\ndef fast_function():\r\n    sqrt = math.sqrt  # Local variable\r\n    for i in range(1000):\r\n        sqrt(i)\r\n\r\n# Use __slots__ for memory efficiency\r\nclass Point:\r\n    __slots__ = ['x', 'y']\r\n\r\n    def __init__(self, x, y):\r\n        self.x = x\r\n        self.y = y\r\n\r\n# Use collections.deque for queues\r\nfrom collections import deque\r\nqueue = deque()\r\nqueue.append(1)  # O(1)\r\nqueue.popleft()  # O(1)\r\n\r\n# Use dict.get() instead of try/except for optional keys\r\n# Slow\r\ntry:\r\n    value = dictionary['key']\r\nexcept KeyError:\r\n    value = default_value\r\n\r\n# Fast\r\nvalue = dictionary.get('key', default_value)\r\n\r\n# Use list comprehensions instead of loops\r\n# Slow\r\nresult = []\r\nfor i in range(10):\r\n    result.append(i * 2)\r\n\r\n# Fast\r\nresult = [i * 2 for i in range(10)]\r\n```\r\n\r\n---\r\n\r\n## Conclusion\r\n\r\nThis comprehensive Python cheat sheet covers fundamental concepts, advanced features, and professional best practices. Remember these key principles:\r\n\r\n1. **Write readable code** - Code is read more often than it's written\r\n2. **Follow PEP 8** - Consistent style improves maintainability\r\n3. **Use type hints** - They improve code documentation and catch errors\r\n4. **Handle errors gracefully** - Anticipate and handle edge cases\r\n5. **Test your code** - Automated tests prevent regressions\r\n6. **Profile before optimizing** - Measure performance bottlenecks\r\n7. **Document your code** - Clear docstrings and comments help others\r\n8. **Use virtual environments** - Isolate project dependencies\r\n9. **Keep learning** - Python ecosystem is constantly evolving\r\n10. **Practice regularly** - Consistent coding improves skills\r\n\r\nRemember: The best code is not just functional, but also readable, maintainable, and efficient. Happy coding!\r\n";
