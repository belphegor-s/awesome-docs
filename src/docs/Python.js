export const Python = "# Python Cheat Sheet - Complete Documentation\n\n## Table of Contents\n\n1. [Basic Syntax & Variables](#basic-syntax--variables)\n2. [Data Types & Structures](#data-types--structures)\n3. [Control Flow](#control-flow)\n4. [Functions](#functions)\n5. [Object-Oriented Programming](#object-oriented-programming)\n6. [Error Handling](#error-handling)\n7. [File I/O & Path Operations](#file-io--path-operations)\n8. [Iterators & Generators](#iterators--generators)\n9. [Functional Programming](#functional-programming)\n10. [Concurrency & Parallelism](#concurrency--parallelism)\n11. [Advanced Features](#advanced-features)\n12. [Testing & Debugging](#testing--debugging)\n13. [Performance & Optimization](#performance--optimization)\n14. [Logging](#logging)\n15. [Regular Expressions](#regular-expressions)\n16. [Professional Best Practices](#professional-best-practices)\n\n---\n\n## Basic Syntax & Variables\n\n### Variable Naming Conventions (PEP 8)\n\n- **Variables & Functions**: `snake_case`\n- **Constants**: `UPPER_CASE`\n- **Classes**: `PascalCase`\n- **Private attributes**: `_single_underscore`\n- **Name mangling**: `__double_underscore`\n\n### Type Hints\n\n```python\n# Basic types\nname: str = \"Python\"\nage: int = 25\nprice: float = 19.99\nis_active: bool = True\n\n# Collections\nnumbers: List[int] = [1, 2, 3]\nperson: Dict[str, Any] = {\"name\": \"Alice\", \"age\": 30}\ncoordinates: Tuple[int, int] = (10, 20)\n\n# Optional and Union types\noptional_name: Optional[str] = None\nid_or_name: Union[int, str] = \"user_123\"\n```\n\n### Multiple Assignment & Unpacking\n\n```python\n# Multiple assignment\nx, y, z = 1, 2, 3\na = b = c = 0\n\n# Unpacking\nfirst, *middle, last = [1, 2, 3, 4, 5]\nhead, *tail = [\"a\", \"b\", \"c\", \"d\"]\n```\n\n---\n\n## Data Types & Structures\n\n### Strings\n\n```python\n# F-strings (Python 3.6+) - Preferred method\nname = \"Alice\"\nage = 30\nmessage = f\"Hello, {name}! You are {age} years old.\"\n\n# String methods\ntext = \"  Hello, World!  \"\ncleaned = text.strip().lower().replace(\"world\", \"python\")\nwords = text.split()\njoined = \"-\".join(words)\n```\n\n### Lists\n\n```python\n# List comprehensions\nsquares = [x**2 for x in range(10)]\nevens = [x for x in range(20) if x % 2 == 0]\nmatrix = [[i*j for j in range(3)] for i in range(3)]\n\n# List methods\nnumbers = [1, 2, 3]\nnumbers.append(4)           # Add to end\nnumbers.insert(0, 0)        # Insert at index\nnumbers.extend([5, 6])      # Add multiple items\nnumbers.remove(2)           # Remove first occurrence\npopped = numbers.pop()      # Remove and return last item\n```\n\n### Dictionaries\n\n```python\n# Dictionary comprehensions\nsquared_dict = {x: x**2 for x in range(5)}\nfiltered_dict = {k: v for k, v in data.items() if condition}\n\n# Dictionary methods\nperson = {\"name\": \"Alice\", \"age\": 30}\nname = person.get(\"name\", \"Unknown\")    # Safe access\nkeys = person.keys()\nvalues = person.values()\nitems = person.items()\n```\n\n### Sets\n\n```python\n# Set operations\nset_a = {1, 2, 3, 4}\nset_b = {3, 4, 5, 6}\n\nunion = set_a | set_b           # {1, 2, 3, 4, 5, 6}\nintersection = set_a & set_b    # {3, 4}\ndifference = set_a - set_b      # {1, 2}\nsymmetric_diff = set_a ^ set_b  # {1, 2, 5, 6}\n```\n\n---\n\n## Control Flow\n\n### Conditional Statements\n\n```python\n# If-elif-else\ndef categorize_age(age: int) -> str:\n    if age < 13:\n        return \"child\"\n    elif age < 20:\n        return \"teenager\"\n    elif age < 65:\n        return \"adult\"\n    else:\n        return \"senior\"\n\n# Ternary operator\nstatus = \"active\" if user.is_logged_in else \"inactive\"\n\n# Match statement (Python 3.10+)\ndef handle_status(status: str) -> str:\n    match status:\n        case \"pending\":\n            return \"Processing...\"\n        case \"approved\":\n            return \"Access granted\"\n        case \"rejected\":\n            return \"Access denied\"\n        case _:\n            return \"Unknown status\"\n```\n\n### Loops\n\n```python\n# For loops with enumerate\nfor index, value in enumerate(items):\n    print(f\"{index}: {value}\")\n\n# For loops with zip\nnames = [\"Alice\", \"Bob\", \"Charlie\"]\nages = [25, 30, 35]\nfor name, age in zip(names, ages):\n    print(f\"{name} is {age} years old\")\n\n# Dictionary iteration\nfor key, value in dictionary.items():\n    print(f\"{key}: {value}\")\n\n# While loops with else\ncounter = 0\nwhile counter < 5:\n    print(counter)\n    counter += 1\nelse:\n    print(\"Loop completed normally\")\n```\n\n---\n\n## Functions\n\n### Function Definitions\n\n```python\n# Basic function with type hints\ndef calculate_area(length: float, width: float) -> float:\n    \"\"\"Calculate the area of a rectangle.\"\"\"\n    return length * width\n\n# Function with default parameters\ndef greet(name: str, greeting: str = \"Hello\") -> str:\n    \"\"\"Greet a person with a custom greeting.\"\"\"\n    return f\"{greeting}, {name}!\"\n\n# Function with variable arguments\ndef sum_numbers(*args: int) -> int:\n    \"\"\"Sum any number of integers.\"\"\"\n    return sum(args)\n\ndef create_profile(**kwargs: Any) -> Dict[str, Any]:\n    \"\"\"Create a user profile from keyword arguments.\"\"\"\n    return kwargs\n```\n\n### Advanced Function Features\n\n```python\n# Lambda functions\nsquare = lambda x: x**2\nis_even = lambda x: x % 2 == 0\n\n# Higher-order functions\ndef apply_function(func: Callable, data: List[Any]) -> List[Any]:\n    \"\"\"Apply a function to each item in a list.\"\"\"\n    return [func(item) for item in data]\n\n# Closures\ndef make_multiplier(factor: int) -> Callable[[int], int]:\n    \"\"\"Create a multiplier function.\"\"\"\n    def multiplier(x: int) -> int:\n        return x * factor\n    return multiplier\n\ndouble = make_multiplier(2)\ntriple = make_multiplier(3)\n```\n\n### Decorators\n\n```python\n# Function decorator\ndef log_calls(func):\n    \"\"\"Decorator to log function calls.\"\"\"\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        print(f\"Calling {func.__name__} with args: {args}, kwargs: {kwargs}\")\n        result = func(*args, **kwargs)\n        print(f\"{func.__name__} returned: {result}\")\n        return result\n    return wrapper\n\n# Decorator with parameters\ndef retry(max_attempts: int = 3, delay: float = 1.0):\n    \"\"\"Decorator to retry function on failure.\"\"\"\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            for attempt in range(max_attempts):\n                try:\n                    return func(*args, **kwargs)\n                except Exception as e:\n                    if attempt == max_attempts - 1:\n                        raise\n                    print(f\"Attempt {attempt + 1} failed: {e}\")\n                    time.sleep(delay)\n            return None\n        return wrapper\n    return decorator\n\n# Class decorator\ndef singleton(cls):\n    \"\"\"Decorator to make a class a singleton.\"\"\"\n    instances = {}\n    def get_instance(*args, **kwargs):\n        if cls not in instances:\n            instances[cls] = cls(*args, **kwargs)\n        return instances[cls]\n    return get_instance\n```\n\n---\n\n## Object-Oriented Programming\n\n### Basic Classes\n\n```python\nclass BankAccount:\n    \"\"\"A simple bank account class.\"\"\"\n\n    # Class variable\n    bank_name = \"MyBank\"\n\n    def __init__(self, account_number: str, initial_balance: float = 0.0):\n        self.account_number = account_number\n        self._balance = initial_balance  # Protected attribute\n        self.__pin = None  # Private attribute\n\n    def deposit(self, amount: float) -> None:\n        \"\"\"Deposit money into the account.\"\"\"\n        if amount > 0:\n            self._balance += amount\n        else:\n            raise ValueError(\"Deposit amount must be positive\")\n\n    def withdraw(self, amount: float) -> None:\n        \"\"\"Withdraw money from the account.\"\"\"\n        if amount > self._balance:\n            raise ValueError(\"Insufficient funds\")\n        self._balance -= amount\n\n    @property\n    def balance(self) -> float:\n        \"\"\"Get the current balance.\"\"\"\n        return self._balance\n\n    def __str__(self) -> str:\n        return f\"Account {self.account_number}: ${self._balance:.2f}\"\n\n    def __repr__(self) -> str:\n        return f\"BankAccount('{self.account_number}', {self._balance})\"\n```\n\n### Inheritance\n\n```python\nclass SavingsAccount(BankAccount):\n    \"\"\"A savings account with interest.\"\"\"\n\n    def __init__(self, account_number: str, initial_balance: float = 0.0,\n                 interest_rate: float = 0.01):\n        super().__init__(account_number, initial_balance)\n        self.interest_rate = interest_rate\n\n    def apply_interest(self) -> None:\n        \"\"\"Apply interest to the account.\"\"\"\n        interest = self._balance * self.interest_rate\n        self.deposit(interest)\n\n    def __str__(self) -> str:\n        return f\"Savings {super().__str__()} @ {self.interest_rate*100:.1f}%\"\n```\n\n### Abstract Base Classes\n\n```python\nfrom abc import ABC, abstractmethod\n\nclass Vehicle(ABC):\n    \"\"\"Abstract base class for vehicles.\"\"\"\n\n    def __init__(self, brand: str, model: str):\n        self.brand = brand\n        self.model = model\n\n    @abstractmethod\n    def start_engine(self) -> None:\n        \"\"\"Start the vehicle's engine.\"\"\"\n        pass\n\n    @abstractmethod\n    def stop_engine(self) -> None:\n        \"\"\"Stop the vehicle's engine.\"\"\"\n        pass\n\n    def honk(self) -> str:\n        \"\"\"Make a honking sound.\"\"\"\n        return \"Beep beep!\"\n\nclass Car(Vehicle):\n    \"\"\"Car implementation of Vehicle.\"\"\"\n\n    def start_engine(self) -> None:\n        print(f\"Starting {self.brand} {self.model} engine...\")\n\n    def stop_engine(self) -> None:\n        print(f\"Stopping {self.brand} {self.model} engine...\")\n```\n\n### Dataclasses\n\n```python\nfrom dataclasses import dataclass, field\nfrom typing import List\n\n@dataclass\nclass Product:\n    \"\"\"Product dataclass with automatic methods.\"\"\"\n    name: str\n    price: float\n    quantity: int = 0\n    tags: List[str] = field(default_factory=list)\n\n    def __post_init__(self):\n        \"\"\"Called after __init__.\"\"\"\n        if self.price < 0:\n            raise ValueError(\"Price cannot be negative\")\n\n    @property\n    def total_value(self) -> float:\n        \"\"\"Calculate total value of inventory.\"\"\"\n        return self.price * self.quantity\n\n@dataclass(frozen=True)  # Immutable dataclass\nclass Point:\n    \"\"\"Immutable point in 2D space.\"\"\"\n    x: float\n    y: float\n\n    def distance_from_origin(self) -> float:\n        \"\"\"Calculate distance from origin.\"\"\"\n        return (self.x**2 + self.y**2)**0.5\n```\n\n### Properties and Descriptors\n\n```python\nclass Temperature:\n    \"\"\"Temperature class with validation.\"\"\"\n\n    def __init__(self, celsius: float = 0):\n        self._celsius = celsius\n\n    @property\n    def celsius(self) -> float:\n        \"\"\"Get temperature in Celsius.\"\"\"\n        return self._celsius\n\n    @celsius.setter\n    def celsius(self, value: float) -> None:\n        \"\"\"Set temperature in Celsius.\"\"\"\n        if value < -273.15:\n            raise ValueError(\"Temperature below absolute zero\")\n        self._celsius = value\n\n    @property\n    def fahrenheit(self) -> float:\n        \"\"\"Get temperature in Fahrenheit.\"\"\"\n        return (self._celsius * 9/5) + 32\n\n    @fahrenheit.setter\n    def fahrenheit(self, value: float) -> None:\n        \"\"\"Set temperature in Fahrenheit.\"\"\"\n        self.celsius = (value - 32) * 5/9\n\n    @property\n    def kelvin(self) -> float:\n        \"\"\"Get temperature in Kelvin.\"\"\"\n        return self._celsius + 273.15\n```\n\n---\n\n## Error Handling\n\n### Exception Types\n\n```python\n# Built-in exceptions\ntry:\n    result = 10 / 0\nexcept ZeroDivisionError as e:\n    print(f\"Division by zero: {e}\")\nexcept ValueError as e:\n    print(f\"Invalid value: {e}\")\nexcept TypeError as e:\n    print(f\"Type error: {e}\")\nexcept Exception as e:\n    print(f\"Unexpected error: {e}\")\nelse:\n    print(\"No exception occurred\")\nfinally:\n    print(\"This always executes\")\n```\n\n### Custom Exceptions\n\n```python\nclass ApplicationError(Exception):\n    \"\"\"Base exception for application errors.\"\"\"\n    pass\n\nclass ValidationError(ApplicationError):\n    \"\"\"Exception for validation failures.\"\"\"\n\n    def __init__(self, message: str, field: str = None):\n        self.message = message\n        self.field = field\n        super().__init__(self.message)\n\nclass DatabaseError(ApplicationError):\n    \"\"\"Exception for database-related errors.\"\"\"\n\n    def __init__(self, message: str, query: str = None):\n        self.message = message\n        self.query = query\n        super().__init__(self.message)\n\n# Usage\ndef validate_email(email: str) -> None:\n    \"\"\"Validate email format.\"\"\"\n    if \"@\" not in email:\n        raise ValidationError(\"Invalid email format\", \"email\")\n```\n\n### Context Managers for Error Handling\n\n```python\nfrom contextlib import contextmanager\n\n@contextmanager\ndef handle_errors():\n    \"\"\"Context manager for error handling.\"\"\"\n    try:\n        yield\n    except ValidationError as e:\n        print(f\"Validation error: {e.message}\")\n    except Exception as e:\n        print(f\"Unexpected error: {e}\")\n        raise\n\n# Usage\nwith handle_errors():\n    validate_email(\"invalid-email\")\n```\n\n---\n\n## File I/O & Path Operations\n\n### Modern File Operations with Pathlib\n\n```python\nfrom pathlib import Path\n\n# Path creation and manipulation\ncurrent_dir = Path.cwd()\nhome_dir = Path.home()\ndata_dir = Path(\"data\")\nfile_path = data_dir / \"users.txt\"\n\n# File operations\ndef read_file(file_path: Path) -> str:\n    \"\"\"Read entire file content.\"\"\"\n    with open(file_path, 'r', encoding='utf-8') as file:\n        return file.read()\n\ndef write_file(file_path: Path, content: str) -> None:\n    \"\"\"Write content to file.\"\"\"\n    file_path.parent.mkdir(parents=True, exist_ok=True)\n    with open(file_path, 'w', encoding='utf-8') as file:\n        file.write(content)\n\ndef append_to_file(file_path: Path, content: str) -> None:\n    \"\"\"Append content to file.\"\"\"\n    with open(file_path, 'a', encoding='utf-8') as file:\n        file.write(content)\n\n# File information\ndef get_file_info(file_path: Path) -> Dict[str, Any]:\n    \"\"\"Get file information.\"\"\"\n    if not file_path.exists():\n        return {\"exists\": False}\n\n    stat = file_path.stat()\n    return {\n        \"exists\": True,\n        \"size\": stat.st_size,\n        \"modified\": stat.st_mtime,\n        \"is_file\": file_path.is_file(),\n        \"is_dir\": file_path.is_dir(),\n        \"extension\": file_path.suffix,\n        \"stem\": file_path.stem\n    }\n```\n\n### Working with Different File Formats\n\n```python\nimport json\nimport csv\nfrom typing import Any, Dict, List\n\ndef read_json(file_path: Path) -> Any:\n    \"\"\"Read JSON file.\"\"\"\n    with open(file_path, 'r', encoding='utf-8') as file:\n        return json.load(file)\n\ndef write_json(file_path: Path, data: Any) -> None:\n    \"\"\"Write data to JSON file.\"\"\"\n    with open(file_path, 'w', encoding='utf-8') as file:\n        json.dump(data, file, indent=2, ensure_ascii=False)\n\ndef read_csv(file_path: Path) -> List[Dict[str, Any]]:\n    \"\"\"Read CSV file as list of dictionaries.\"\"\"\n    with open(file_path, 'r', encoding='utf-8') as file:\n        return list(csv.DictReader(file))\n\ndef write_csv(file_path: Path, data: List[Dict[str, Any]]) -> None:\n    \"\"\"Write data to CSV file.\"\"\"\n    if not data:\n        return\n\n    with open(file_path, 'w', encoding='utf-8', newline='') as file:\n        writer = csv.DictWriter(file, fieldnames=data[0].keys())\n        writer.writeheader()\n        writer.writerows(data)\n```\n\n---\n\n## Iterators & Generators\n\n### Generators\n\n```python\ndef fibonacci(n: int) -> Generator[int, None, None]:\n    \"\"\"Generate Fibonacci sequence.\"\"\"\n    a, b = 0, 1\n    for _ in range(n):\n        yield a\n        a, b = b, a + b\n\ndef read_large_file(file_path: Path) -> Generator[str, None, None]:\n    \"\"\"Read large file line by line.\"\"\"\n    with open(file_path, 'r') as file:\n        for line in file:\n            yield line.strip()\n\n# Generator expressions\nsquares = (x**2 for x in range(1000000))  # Memory efficient\nfiltered_data = (item for item in data if condition(item))\n```\n\n### Custom Iterators\n\n```python\nclass Range:\n    \"\"\"Custom range iterator.\"\"\"\n\n    def __init__(self, start: int, end: int, step: int = 1):\n        self.start = start\n        self.end = end\n        self.step = step\n\n    def __iter__(self):\n        return RangeIterator(self.start, self.end, self.step)\n\nclass RangeIterator:\n    \"\"\"Iterator for Range class.\"\"\"\n\n    def __init__(self, start: int, end: int, step: int):\n        self.current = start\n        self.end = end\n        self.step = step\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        if self.current >= self.end:\n            raise StopIteration\n        value = self.current\n        self.current += self.step\n        return value\n```\n\n---\n\n## Functional Programming\n\n### Higher-Order Functions\n\n```python\nfrom functools import reduce, partial\n\n# Map, filter, reduce\nnumbers = [1, 2, 3, 4, 5]\nsquared = list(map(lambda x: x**2, numbers))\nevens = list(filter(lambda x: x % 2 == 0, numbers))\nsum_all = reduce(lambda x, y: x + y, numbers)\n\n# Partial application\ndef power(base: int, exponent: int) -> int:\n    \"\"\"Calculate base raised to exponent.\"\"\"\n    return base ** exponent\n\nsquare = partial(power, exponent=2)\ncube = partial(power, exponent=3)\n\n# Function composition\ndef compose(*functions):\n    \"\"\"Compose multiple functions.\"\"\"\n    return reduce(lambda f, g: lambda x: f(g(x)), functions, lambda x: x)\n\n# Usage\nadd_one = lambda x: x + 1\nmultiply_by_two = lambda x: x * 2\nadd_one_then_double = compose(multiply_by_two, add_one)\n```\n\n### Functional Programming Patterns\n\n```python\nfrom typing import Callable, TypeVar\n\nT = TypeVar('T')\nU = TypeVar('U')\n\ndef map_function(func: Callable[[T], U], items: List[T]) -> List[U]:\n    \"\"\"Functional map implementation.\"\"\"\n    return [func(item) for item in items]\n\ndef filter_function(predicate: Callable[[T], bool], items: List[T]) -> List[T]:\n    \"\"\"Functional filter implementation.\"\"\"\n    return [item for item in items if predicate(item)]\n\ndef reduce_function(func: Callable[[T, T], T], items: List[T], initial: T = None) -> T:\n    \"\"\"Functional reduce implementation.\"\"\"\n    iterator = iter(items)\n    if initial is None:\n        result = next(iterator)\n    else:\n        result = initial\n\n    for item in iterator:\n        result = func(result, item)\n    return result\n```\n\n---\n\n## Concurrency & Parallelism\n\n### Threading\n\n```python\nimport threading\nimport time\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\n\ndef worker_function(name: str, duration: int) -> str:\n    \"\"\"Worker function for threading example.\"\"\"\n    print(f\"Worker {name} starting\")\n    time.sleep(duration)\n    print(f\"Worker {name} finished\")\n    return f\"Result from {name}\"\n\n# Basic threading\ndef basic_threading():\n    \"\"\"Demonstrate basic threading.\"\"\"\n    threads = []\n    for i in range(3):\n        t = threading.Thread(target=worker_function, args=(f\"Thread-{i}\", i+1))\n        threads.append(t)\n        t.start()\n\n    for t in threads:\n        t.join()\n\n# ThreadPoolExecutor\ndef thread_pool_example():\n    \"\"\"Demonstrate ThreadPoolExecutor.\"\"\"\n    with ThreadPoolExecutor(max_workers=3) as executor:\n        futures = [executor.submit(worker_function, f\"Worker-{i}\", i+1)\n                  for i in range(5)]\n\n        for future in as_completed(futures):\n            result = future.result()\n            print(f\"Got result: {result}\")\n```\n\n### Async/Await\n\n```python\nimport asyncio\nfrom typing import List\n\nasync def fetch_data(url: str, delay: float = 1.0) -> str:\n    \"\"\"Simulate fetching data from URL.\"\"\"\n    await asyncio.sleep(delay)\n    return f\"Data from {url}\"\n\nasync def fetch_multiple_urls(urls: List[str]) -> List[str]:\n    \"\"\"Fetch data from multiple URLs concurrently.\"\"\"\n    tasks = [fetch_data(url) for url in urls]\n    results = await asyncio.gather(*tasks)\n    return results\n\n# Context manager for async operations\nclass AsyncContextManager:\n    \"\"\"Async context manager example.\"\"\"\n\n    async def __aenter__(self):\n        print(\"Entering async context\")\n        await asyncio.sleep(0.1)\n        return self\n\n    async def __aexit__(self, exc_type, exc_val, exc_tb):\n        print(\"Exiting async context\")\n        await asyncio.sleep(0.1)\n\n# Usage\nasync def main():\n    \"\"\"Main async function.\"\"\"\n    urls = [\"http://example.com\", \"http://google.com\", \"http://github.com\"]\n\n    async with AsyncContextManager():\n        results = await fetch_multiple_urls(urls)\n        for result in results:\n            print(result)\n\n# Run async code\n# asyncio.run(main())\n```\n\n---\n\n## Advanced Features\n\n### Metaclasses\n\n```python\nclass SingletonMeta(type):\n    \"\"\"Metaclass for singleton pattern.\"\"\"\n    _instances = {}\n\n    def __call__(cls, *args, **kwargs):\n        if cls not in cls._instances:\n            cls._instances[cls] = super().__call__(*args, **kwargs)\n        return cls._instances[cls]\n\nclass Database(metaclass=SingletonMeta):\n    \"\"\"Singleton database connection.\"\"\"\n\n    def __init__(self):\n        self.connection = \"database_connection\"\n        print(\"Database connection created\")\n\n# Usage\ndb1 = Database()\ndb2 = Database()\nprint(db1 is db2)  # True\n```\n\n### Descriptors\n\n```python\nclass ValidatedAttribute:\n    \"\"\"Descriptor for validated attributes.\"\"\"\n\n    def __init__(self, validator: Callable[[Any], bool], name: str = None):\n        self.validator = validator\n        self.name = name\n\n    def __set_name__(self, owner, name):\n        self.name = name\n\n    def __get__(self, instance, owner):\n        if instance is None:\n            return self\n        return instance.__dict__.get(self.name)\n\n    def __set__(self, instance, value):\n        if not self.validator(value):\n            raise ValueError(f\"Invalid value for {self.name}: {value}\")\n        instance.__dict__[self.name] = value\n\n# Validators\ndef positive_number(value):\n    \"\"\"Validate positive number.\"\"\"\n    return isinstance(value, (int, float)) and value > 0\n\ndef non_empty_string(value):\n    \"\"\"Validate non-empty string.\"\"\"\n    return isinstance(value, str) and len(value.strip()) > 0\n\n# Usage\nclass Product:\n    \"\"\"Product with validated attributes.\"\"\"\n    name = ValidatedAttribute(non_empty_string)\n    price = ValidatedAttribute(positive_number)\n\n    def __init__(self, name: str, price: float):\n        self.name = name\n        self.price = price\n```\n\n### Protocol (Structural Typing)\n\n```python\nfrom typing import Protocol\n\nclass Drawable(Protocol):\n    \"\"\"Protocol for drawable objects.\"\"\"\n\n    def draw(self) -> None:\n        \"\"\"Draw the object.\"\"\"\n        ...\n\nclass Circle:\n    \"\"\"Circle that implements Drawable protocol.\"\"\"\n\n    def __init__(self, radius: float):\n        self.radius = radius\n\n    def draw(self) -> None:\n        print(f\"Drawing circle with radius {self.radius}\")\n\nclass Square:\n    \"\"\"Square that implements Drawable protocol.\"\"\"\n\n    def __init__(self, side: float):\n        self.side = side\n\n    def draw(self) -> None:\n        print(f\"Drawing square with side {self.side}\")\n\ndef draw_shape(shape: Drawable) -> None:\n    \"\"\"Draw any shape that implements Drawable protocol.\"\"\"\n    shape.draw()\n```\n\n---\n\n## Testing & Debugging\n\n### Unit Testing\n\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass Calculator:\n    \"\"\"Simple calculator class.\"\"\"\n\n    def add(self, a: int, b: int) -> int:\n        return a + b\n\n    def divide(self, a: int, b: int) -> float:\n        if b == 0:\n            raise ValueError(\"Cannot divide by zero\")\n        return a / b\n\nclass TestCalculator(unittest.TestCase):\n    \"\"\"Test cases for Calculator.\"\"\"\n\n    def setUp(self):\n        \"\"\"Set up test fixtures.\"\"\"\n        self.calculator = Calculator()\n\n    def test_add(self):\n        \"\"\"Test addition.\"\"\"\n        result = self.calculator.add(2, 3)\n        self.assertEqual(result, 5)\n\n    def test_divide(self):\n        \"\"\"Test division.\"\"\"\n        result = self.calculator.divide(10, 2)\n        self.assertEqual(result, 5.0)\n\n    def test_divide_by_zero(self):\n        \"\"\"Test division by zero.\"\"\"\n        with self.assertRaises(ValueError):\n            self.calculator.divide(10, 0)\n\n    @patch('builtins.print')\n    def test_with_mock(self, mock_print):\n        \"\"\"Test with mock.\"\"\"\n        mock_print.return_value = None\n        print(\"Hello, World!\")\n        mock_print.assert_called_once_with(\"Hello, World!\")\n```\n\n### Debugging Tools\n\n```python\nimport pdb\nimport traceback\n\ndef debug_function(x: int) -> int:\n    \"\"\"Function with debugging.\"\"\"\n    # Set breakpoint\n    # pdb.set_trace()\n\n    result = x * 2\n    return result\n\ndef handle_exceptions():\n    \"\"\"Exception handling with traceback.\"\"\"\n    try:\n        result = 10 / 0\n    except Exception as e:\n        print(f\"Error: {e}\")\n        print(\"Traceback:\")\n        traceback.print_exc()\n\n# Assertions for debugging\ndef validate_input(value: int) -> None:\n    \"\"\"Validate input with assertions.\"\"\"\n    assert isinstance(value, int), f\"Expected int, got {type(value)}\"\n    assert value > 0, f\"Expected positive value, got {value}\"\n```\n\n---\n\n## Performance & Optimization\n\n### Caching\n\n```python\nfrom functools import lru_cache\nimport time\n\n@lru_cache(maxsize=128)\ndef fibonacci(n: int) -> int:\n    \"\"\"Fibonacci with caching.\"\"\"\n    if n < 2:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)\n\n# Manual caching\ncache = {}\n\ndef fibonacci_manual(n: int) -> int:\n    \"\"\"Fibonacci with manual caching.\"\"\"\n    if n in cache:\n        return cache[n]\n\n    if n < 2:\n        result = n\n    else:\n        result = fibonacci_manual(n-1) + fibonacci_manual(n-2)\n\n    cache[n] = result\n    return result\n```\n\n### Timing and Profiling\n\n```python\nimport time\nimport cProfile\nimport timeit\n\ndef time_function(func, *args, **kwargs):\n    \"\"\"Time function execution.\"\"\"\n    start = time.perf_counter()\n    result = func(*args, **kwargs)\n    end = time.perf_counter()\n    print(f\"{func.__name__} took {end - start:.4f} seconds\")\n    return result\n\n# Context manager for timing\n@contextmanager\ndef timer():\n    \"\"\"Context manager for timing code blocks.\"\"\"\n    start = time.perf_counter()\n    try:\n        yield\n    finally:\n        end = time.perf_counter()\n        print(f\"Elapsed time: {end - start:.4f} seconds\")\n\n# Usage\nwith timer():\n    time.sleep(1)\n\n# Using timeit\ndef test_function():\n    \"\"\"Function to test.\"\"\"\n    return sum(range(1000))\n\nexecution_time = timeit.timeit(test_function, number=10000)\nprint(f\"Average execution time: {execution_time/10000:.6f} seconds\")\n```\n\n### Memory Optimization\n\n```python\nimport sys\nfrom typing import Iterator\n\ndef memory_efficient_processing(data: Iterator[str]) -> Iterator[str]:\n    \"\"\"Process data in memory-efficient way.\"\"\"\n    for item in data:\n        # Process item\n        processed = item.upper().strip()\n        yield processed\n\n# Using slots for memory efficiency\nclass Point:\n    \"\"\"Memory-efficient Point class.\"\"\"\n    __slots__ = ['x', 'y']\n\n    def __init__(self, x: float, y: float):\n        self.x = x\n        self.y = y\n\n# Generator expressions vs list comprehensions\n# Memory efficient\ndata_gen = (x**2 for x in range(1000000))\n\n# Memory intensive\n# data_list = [x**2 for x in range(1000000)]\n```\n\n---\n\n## Logging\n\n### Logging Setup\n\n```python\nimport logging\nfrom logging.handlers import RotatingFileHandler\n\n# Basic logging configuration\nlogging.basicConfig(\n    level=logging.INFO,\n    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',\n    handlers=[\n        logging.FileHandler('app.log'),\n        logging.StreamHandler()\n    ]\n)\n\n# Custom logger\nlogger = logging.getLogger(__name__)\n\ndef setup_logging(log_level: str = \"INFO\", log_file: str = \"app.log\"):\n    \"\"\"Set up logging configuration.\"\"\"\n    numeric_level = getattr(logging, log_level.upper())\n\n    # Create formatter\n    formatter = logging.Formatter(\n        '%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n    )\n\n    # File handler with rotation\n    file_handler = RotatingFileHandler(\n        log_file, maxBytes=10*1024*1024, backupCount=5\n    )\n    file_handler.setFormatter(formatter)\n\n    # Console handler\n    console_handler = logging.StreamHandler()\n    console_handler.setFormatter(formatter)\n\n    # Configure root logger\n    root_logger = logging.getLogger()\n    root_logger.setLevel(numeric_level)\n    root_logger.addHandler(file_handler)\n    root_logger.addHandler(console_handler)\n\n# Usage\ndef process_data(data: List[Any]) -> None:\n    \"\"\"Process data with logging.\"\"\"\n    logger.info(f\"Processing {len(data)} items\")\n\n    try:\n        for item in data:\n            logger.debug(f\"Processing item: {item}\")\n            # Process item\n        logger.info(\"Processing completed successfully\")\n    except Exception as e:\n        logger.error(f\"Processing failed: {e}\", exc_info=True)\n```\n\n---\n\n## Regular Expressions\n\n### Common Patterns\n\n```python\nimport re\nfrom typing import List, Optional\n\n# Compiled patterns for efficiency\nEMAIL_PATTERN = re.compile(r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})\nPHONE_PATTERN = re.compile(r'^\\+?1?\\d{9,15})\nURL_PATTERN = re.compile(r'https?://(?:[-\\w.])+(?:\\:[0-9]+)?(?:/(?:[\\w/_.])*(?:\\?(?:[\\w&=%.])*)?(?:\\#(?:[\\w.])*)?)?')\nIP_PATTERN = re.compile(r'^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))\n\ndef validate_email(email: str) -> bool:\n    \"\"\"Validate email format.\"\"\"\n    return bool(EMAIL_PATTERN.match(email))\n\ndef extract_urls(text: str) -> List[str]:\n    \"\"\"Extract URLs from text.\"\"\"\n    return URL_PATTERN.findall(text)\n\ndef clean_text(text: str) -> str:\n    \"\"\"Clean text by removing extra whitespace.\"\"\"\n    # Remove multiple spaces\n    text = re.sub(r'\\s+', ' ', text)\n    # Remove leading/trailing whitespace\n    text = text.strip()\n    return text\n\ndef extract_numbers(text: str) -> List[float]:\n    \"\"\"Extract numbers from text.\"\"\"\n    pattern = r'-?\\d+\\.?\\d*'\n    matches = re.findall(pattern, text)\n    return [float(match) for match in matches]\n\n# Advanced regex operations\ndef replace_with_function(text: str, pattern: str, replacement_func: callable) -> str:\n    \"\"\"Replace matches using a function.\"\"\"\n    return re.sub(pattern, replacement_func, text)\n\n# Example: Convert to title case\ndef to_title_case(match):\n    \"\"\"Convert match to title case.\"\"\"\n    return match.group(0).title()\n\n# Usage\ntext = \"hello world python programming\"\nresult = replace_with_function(text, r'\\b\\w+\\b', to_title_case)\n```\n\n---\n\n## Professional Best Practices\n\n### Code Organization\n\n```python\n# Project structure\n\"\"\"\nproject/\n├── src/\n│   ├── __init__.py\n│   ├\n```\n";
