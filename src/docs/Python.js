export const Python = "# Complete Python Cheat Sheet & Professional Practices\n\n## Table of Contents\n\n1. [Python Basics](#python-basics)\n2. [Data Types & Variables](#data-types--variables)\n3. [Control Flow](#control-flow)\n4. [Functions](#functions)\n5. [Data Structures](#data-structures)\n6. [Object-Oriented Programming](#object-oriented-programming)\n7. [Error Handling](#error-handling)\n8. [File I/O](#file-io)\n9. [Modules & Packages](#modules--packages)\n10. [Built-in Functions](#built-in-functions)\n11. [List/Dict/Set Comprehensions](#listdictset-comprehensions)\n12. [Generators & Iterators](#generators--iterators)\n13. [Decorators](#decorators)\n14. [Context Managers](#context-managers)\n15. [Regular Expressions](#regular-expressions)\n16. [Testing](#testing)\n17. [Performance & Optimization](#performance--optimization)\n18. [Professional Best Practices](#professional-best-practices)\n19. [Code Style & Standards](#code-style--standards)\n20. [Advanced Topics](#advanced-topics)\n\n---\n\n## Python Basics\n\n### Comments\n\n```python\n# Single line comment\n\"\"\"\nMulti-line comment\nor docstring\n\"\"\"\n```\n\n### Print & Input\n\n```python\nprint(\"Hello, World!\")\nprint(\"Name:\", name, \"Age:\", age)\nprint(f\"Name: {name}, Age: {age}\")  # f-strings (preferred)\nname = input(\"Enter your name: \")\nage = int(input(\"Enter your age: \"))\n```\n\n### Variables & Assignment\n\n```python\n# Variable assignment\nx = 5\ny, z = 10, 20  # Multiple assignment\nx, y = y, x    # Swap values\n\n# Constants (by convention, use UPPERCASE)\nPI = 3.14159\nMAX_SIZE = 100\n```\n\n---\n\n## Data Types & Variables\n\n### Basic Data Types\n\n```python\n# Integers\nnum = 42\nbinary = 0b1010  # 10 in binary\noctal = 0o12     # 10 in octal\nhex_num = 0xA    # 10 in hexadecimal\n\n# Floats\npi = 3.14159\nscientific = 1.5e-4  # 0.00015\n\n# Strings\nname = \"Alice\"\nmessage = 'Hello'\nmultiline = \"\"\"This is a\nmultiline string\"\"\"\n\n# Booleans\nis_valid = True\nis_empty = False\n\n# None\nresult = None\n```\n\n### String Operations\n\n```python\n# String methods\ntext = \"Hello, World!\"\nprint(text.upper())      # HELLO, WORLD!\nprint(text.lower())      # hello, world!\nprint(text.title())      # Hello, World!\nprint(text.strip())      # Remove whitespace\nprint(text.replace(\"Hello\", \"Hi\"))  # Hi, World!\nprint(text.split(\",\"))   # ['Hello', ' World!']\n\n# String formatting\nname = \"Alice\"\nage = 30\nprint(f\"Name: {name}, Age: {age}\")  # f-strings (Python 3.6+)\nprint(\"Name: {}, Age: {}\".format(name, age))  # .format()\nprint(\"Name: %s, Age: %d\" % (name, age))  # % formatting (old style)\n\n# String slicing\ntext = \"Python\"\nprint(text[0])      # P\nprint(text[-1])     # n\nprint(text[1:4])    # yth\nprint(text[:3])     # Pyt\nprint(text[3:])     # hon\nprint(text[::-1])   # nohtyP (reverse)\n```\n\n### Type Conversion\n\n```python\n# Convert between types\nstr_num = \"42\"\nint_num = int(str_num)\nfloat_num = float(str_num)\nstr_again = str(int_num)\n\n# Check types\nprint(type(42))         # <class 'int'>\nprint(isinstance(42, int))  # True\n```\n\n---\n\n## Control Flow\n\n### Conditional Statements\n\n```python\n# if-elif-else\nage = 18\nif age >= 18:\n    print(\"Adult\")\nelif age >= 13:\n    print(\"Teenager\")\nelse:\n    print(\"Child\")\n\n# Ternary operator\nstatus = \"Adult\" if age >= 18 else \"Minor\"\n\n# Multiple conditions\nif age >= 18 and age < 65:\n    print(\"Working age\")\n\nif name == \"Alice\" or name == \"Bob\":\n    print(\"Known person\")\n```\n\n### Loops\n\n```python\n# for loop\nfor i in range(5):\n    print(i)  # 0, 1, 2, 3, 4\n\nfor i in range(1, 6):\n    print(i)  # 1, 2, 3, 4, 5\n\nfor i in range(0, 10, 2):\n    print(i)  # 0, 2, 4, 6, 8\n\n# Iterating over sequences\nfruits = [\"apple\", \"banana\", \"orange\"]\nfor fruit in fruits:\n    print(fruit)\n\n# Enumerate for index and value\nfor index, fruit in enumerate(fruits):\n    print(f\"{index}: {fruit}\")\n\n# while loop\ncount = 0\nwhile count < 5:\n    print(count)\n    count += 1\n\n# Loop control\nfor i in range(10):\n    if i == 3:\n        continue  # Skip this iteration\n    if i == 7:\n        break     # Exit loop\n    print(i)\n\n# else clause with loops\nfor i in range(5):\n    print(i)\nelse:\n    print(\"Loop completed normally\")  # Only if no break\n```\n\n---\n\n## Functions\n\n### Function Definition\n\n```python\n# Basic function\ndef greet(name):\n    return f\"Hello, {name}!\"\n\n# Function with default parameters\ndef greet(name, greeting=\"Hello\"):\n    return f\"{greeting}, {name}!\"\n\n# Function with multiple parameters\ndef add(a, b):\n    return a + b\n\n# Function with *args and **kwargs\ndef flexible_func(*args, **kwargs):\n    print(\"Args:\", args)\n    print(\"Kwargs:\", kwargs)\n\nflexible_func(1, 2, 3, name=\"Alice\", age=30)\n\n# Type hints (Python 3.5+)\ndef add_numbers(a: int, b: int) -> int:\n    return a + b\n\n# Function with optional parameters\ndef create_user(name: str, email: str = None, age: int = None) -> dict:\n    user = {\"name\": name}\n    if email:\n        user[\"email\"] = email\n    if age:\n        user[\"age\"] = age\n    return user\n```\n\n### Lambda Functions\n\n```python\n# Lambda (anonymous) functions\nsquare = lambda x: x ** 2\nadd = lambda x, y: x + y\n\n# Using lambda with built-in functions\nnumbers = [1, 2, 3, 4, 5]\nsquared = list(map(lambda x: x ** 2, numbers))\neven = list(filter(lambda x: x % 2 == 0, numbers))\n```\n\n### Higher-Order Functions\n\n```python\n# Functions as arguments\ndef apply_operation(func, x, y):\n    return func(x, y)\n\nresult = apply_operation(lambda a, b: a + b, 5, 3)  # 8\n\n# Functions returning functions\ndef create_multiplier(n):\n    def multiplier(x):\n        return x * n\n    return multiplier\n\ndouble = create_multiplier(2)\nprint(double(5))  # 10\n```\n\n---\n\n## Data Structures\n\n### Lists\n\n```python\n# List creation\nfruits = [\"apple\", \"banana\", \"orange\"]\nnumbers = [1, 2, 3, 4, 5]\nmixed = [1, \"hello\", 3.14, True]\n\n# List operations\nfruits.append(\"grape\")          # Add to end\nfruits.insert(1, \"kiwi\")        # Insert at index\nfruits.remove(\"banana\")         # Remove by value\npopped = fruits.pop()           # Remove and return last\nfruits.extend([\"mango\", \"pear\"]) # Add multiple items\n\n# List slicing\nprint(fruits[1:3])    # Elements from index 1 to 2\nprint(fruits[:2])     # First 2 elements\nprint(fruits[2:])     # From index 2 to end\nprint(fruits[-2:])    # Last 2 elements\n\n# List methods\nfruits.sort()                   # Sort in place\nsorted_fruits = sorted(fruits)  # Return new sorted list\nfruits.reverse()                # Reverse in place\ncount = fruits.count(\"apple\")   # Count occurrences\nindex = fruits.index(\"apple\")   # Find index\n\n# List comprehensions\nsquares = [x**2 for x in range(10)]\neven_squares = [x**2 for x in range(10) if x % 2 == 0]\n```\n\n### Tuples\n\n```python\n# Tuple creation\npoint = (3, 4)\ncolors = (\"red\", \"green\", \"blue\")\nsingle_item = (42,)  # Note the comma\n\n# Tuple unpacking\nx, y = point\nfirst, *rest = colors  # first=\"red\", rest=[\"green\", \"blue\"]\n\n# Named tuples\nfrom collections import namedtuple\nPoint = namedtuple('Point', ['x', 'y'])\np = Point(3, 4)\nprint(p.x, p.y)  # 3 4\n```\n\n### Dictionaries\n\n```python\n# Dictionary creation\nperson = {\"name\": \"Alice\", \"age\": 30, \"city\": \"New York\"}\nempty_dict = {}\ndict_from_keys = dict.fromkeys([\"a\", \"b\", \"c\"], 0)\n\n# Dictionary operations\nperson[\"email\"] = \"alice@example.com\"  # Add/update\nage = person.get(\"age\", 0)             # Get with default\nperson.setdefault(\"country\", \"USA\")    # Set if not exists\nperson.update({\"phone\": \"123-456-7890\", \"age\": 31})\n\n# Dictionary methods\nkeys = person.keys()\nvalues = person.values()\nitems = person.items()\n\n# Dictionary comprehensions\nsquares = {x: x**2 for x in range(5)}\nfiltered = {k: v for k, v in person.items() if isinstance(v, str)}\n```\n\n### Sets\n\n```python\n# Set creation\nfruits = {\"apple\", \"banana\", \"orange\"}\nnumbers = set([1, 2, 3, 4, 5])\nempty_set = set()  # Note: {} creates an empty dict\n\n# Set operations\nfruits.add(\"grape\")\nfruits.remove(\"banana\")  # KeyError if not found\nfruits.discard(\"kiwi\")   # No error if not found\n\n# Set operations\nset1 = {1, 2, 3, 4}\nset2 = {3, 4, 5, 6}\nunion = set1 | set2           # {1, 2, 3, 4, 5, 6}\nintersection = set1 & set2    # {3, 4}\ndifference = set1 - set2      # {1, 2}\nsymmetric_diff = set1 ^ set2  # {1, 2, 5, 6}\n\n# Set comprehensions\neven_squares = {x**2 for x in range(10) if x % 2 == 0}\n```\n\n---\n\n## Object-Oriented Programming\n\n### Classes and Objects\n\n```python\nclass Person:\n    # Class variable\n    species = \"Homo sapiens\"\n\n    def __init__(self, name, age):\n        # Instance variables\n        self.name = name\n        self.age = age\n\n    def introduce(self):\n        return f\"Hi, I'm {self.name} and I'm {self.age} years old.\"\n\n    def have_birthday(self):\n        self.age += 1\n\n    # String representation\n    def __str__(self):\n        return f\"Person(name='{self.name}', age={self.age})\"\n\n    def __repr__(self):\n        return f\"Person('{self.name}', {self.age})\"\n\n# Creating objects\nperson1 = Person(\"Alice\", 30)\nperson2 = Person(\"Bob\", 25)\n\nprint(person1.introduce())\nperson1.have_birthday()\nprint(person1)\n```\n\n### Inheritance\n\n```python\nclass Animal:\n    def __init__(self, name):\n        self.name = name\n\n    def speak(self):\n        pass\n\n    def info(self):\n        return f\"This is {self.name}\"\n\nclass Dog(Animal):\n    def __init__(self, name, breed):\n        super().__init__(name)  # Call parent constructor\n        self.breed = breed\n\n    def speak(self):\n        return \"Woof!\"\n\n    def info(self):\n        return f\"{super().info()}, a {self.breed}\"\n\nclass Cat(Animal):\n    def speak(self):\n        return \"Meow!\"\n\n# Usage\ndog = Dog(\"Buddy\", \"Golden Retriever\")\ncat = Cat(\"Whiskers\")\n\nprint(dog.speak())  # Woof!\nprint(cat.speak())  # Meow!\nprint(dog.info())   # This is Buddy, a Golden Retriever\n```\n\n### Advanced OOP Concepts\n\n```python\nclass BankAccount:\n    def __init__(self, account_number, initial_balance=0):\n        self.account_number = account_number\n        self._balance = initial_balance  # Protected attribute\n        self.__pin = None               # Private attribute\n\n    @property\n    def balance(self):\n        \"\"\"Getter for balance\"\"\"\n        return self._balance\n\n    @balance.setter\n    def balance(self, amount):\n        \"\"\"Setter for balance with validation\"\"\"\n        if amount < 0:\n            raise ValueError(\"Balance cannot be negative\")\n        self._balance = amount\n\n    def deposit(self, amount):\n        if amount > 0:\n            self._balance += amount\n\n    def withdraw(self, amount):\n        if 0 < amount <= self._balance:\n            self._balance -= amount\n            return True\n        return False\n\n    @staticmethod\n    def validate_account_number(account_number):\n        \"\"\"Static method - doesn't need instance\"\"\"\n        return len(account_number) == 10\n\n    @classmethod\n    def create_savings_account(cls, account_number):\n        \"\"\"Class method - alternative constructor\"\"\"\n        return cls(account_number, 100)  # Savings starts with $100\n\n# Usage\naccount = BankAccount(\"1234567890\", 1000)\nprint(account.balance)  # 1000\naccount.deposit(500)\nprint(account.balance)  # 1500\n\nsavings = BankAccount.create_savings_account(\"0987654321\")\nprint(BankAccount.validate_account_number(\"1234567890\"))  # True\n```\n\n### Abstract Classes and Interfaces\n\n```python\nfrom abc import ABC, abstractmethod\n\nclass Shape(ABC):\n    @abstractmethod\n    def area(self):\n        pass\n\n    @abstractmethod\n    def perimeter(self):\n        pass\n\nclass Rectangle(Shape):\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n\n    def area(self):\n        return self.width * self.height\n\n    def perimeter(self):\n        return 2 * (self.width + self.height)\n\nclass Circle(Shape):\n    def __init__(self, radius):\n        self.radius = radius\n\n    def area(self):\n        return 3.14159 * self.radius ** 2\n\n    def perimeter(self):\n        return 2 * 3.14159 * self.radius\n\n# Usage\nrect = Rectangle(5, 3)\ncircle = Circle(4)\n\nprint(f\"Rectangle area: {rect.area()}\")\nprint(f\"Circle area: {circle.area()}\")\n```\n\n---\n\n## Error Handling\n\n### Try-Except Blocks\n\n```python\n# Basic exception handling\ntry:\n    result = 10 / 0\nexcept ZeroDivisionError:\n    print(\"Cannot divide by zero!\")\n\n# Multiple exceptions\ntry:\n    value = int(input(\"Enter a number: \"))\n    result = 10 / value\nexcept ValueError:\n    print(\"Invalid input! Please enter a number.\")\nexcept ZeroDivisionError:\n    print(\"Cannot divide by zero!\")\n\n# Catching multiple exceptions\ntry:\n    # Some risky operation\n    pass\nexcept (ValueError, TypeError) as e:\n    print(f\"Error occurred: {e}\")\n\n# Catching all exceptions\ntry:\n    # Some risky operation\n    pass\nexcept Exception as e:\n    print(f\"Unexpected error: {e}\")\n\n# Try-except-else-finally\ntry:\n    file = open(\"data.txt\", \"r\")\nexcept FileNotFoundError:\n    print(\"File not found!\")\nelse:\n    # Executed if no exception occurred\n    content = file.read()\n    print(\"File read successfully!\")\nfinally:\n    # Always executed\n    if 'file' in locals():\n        file.close()\n```\n\n### Custom Exceptions\n\n```python\nclass CustomError(Exception):\n    \"\"\"Custom exception class\"\"\"\n    pass\n\nclass ValidationError(Exception):\n    \"\"\"Exception for validation errors\"\"\"\n    def __init__(self, message, code=None):\n        super().__init__(message)\n        self.code = code\n\ndef validate_age(age):\n    if age < 0:\n        raise ValidationError(\"Age cannot be negative\", code=\"NEGATIVE_AGE\")\n    if age > 150:\n        raise ValidationError(\"Age seems unrealistic\", code=\"UNREALISTIC_AGE\")\n\n# Usage\ntry:\n    validate_age(-5)\nexcept ValidationError as e:\n    print(f\"Validation error: {e}\")\n    print(f\"Error code: {e.code}\")\n```\n\n---\n\n## File I/O\n\n### File Operations\n\n```python\n# Reading files\nwith open(\"file.txt\", \"r\") as file:\n    content = file.read()          # Read entire file\n\nwith open(\"file.txt\", \"r\") as file:\n    lines = file.readlines()       # Read all lines as list\n\nwith open(\"file.txt\", \"r\") as file:\n    for line in file:              # Read line by line\n        print(line.strip())\n\n# Writing files\nwith open(\"output.txt\", \"w\") as file:\n    file.write(\"Hello, World!\")\n\nwith open(\"output.txt\", \"a\") as file:  # Append mode\n    file.write(\"\\nNew line\")\n\n# Writing multiple lines\nlines = [\"Line 1\\n\", \"Line 2\\n\", \"Line 3\\n\"]\nwith open(\"output.txt\", \"w\") as file:\n    file.writelines(lines)\n\n# Binary file operations\nwith open(\"image.jpg\", \"rb\") as file:\n    binary_data = file.read()\n\nwith open(\"copy.jpg\", \"wb\") as file:\n    file.write(binary_data)\n```\n\n### Working with CSV\n\n```python\nimport csv\n\n# Reading CSV\nwith open(\"data.csv\", \"r\") as file:\n    reader = csv.reader(file)\n    for row in reader:\n        print(row)\n\n# Reading CSV with headers\nwith open(\"data.csv\", \"r\") as file:\n    reader = csv.DictReader(file)\n    for row in reader:\n        print(row[\"name\"], row[\"age\"])\n\n# Writing CSV\ndata = [\n    [\"Name\", \"Age\", \"City\"],\n    [\"Alice\", 30, \"New York\"],\n    [\"Bob\", 25, \"Los Angeles\"]\n]\n\nwith open(\"output.csv\", \"w\", newline=\"\") as file:\n    writer = csv.writer(file)\n    writer.writerows(data)\n\n# Writing CSV with DictWriter\nfieldnames = [\"name\", \"age\", \"city\"]\nwith open(\"output.csv\", \"w\", newline=\"\") as file:\n    writer = csv.DictWriter(file, fieldnames=fieldnames)\n    writer.writeheader()\n    writer.writerow({\"name\": \"Alice\", \"age\": 30, \"city\": \"New York\"})\n```\n\n### JSON Operations\n\n```python\nimport json\n\n# Reading JSON\nwith open(\"data.json\", \"r\") as file:\n    data = json.load(file)\n\n# Writing JSON\ndata = {\"name\": \"Alice\", \"age\": 30, \"city\": \"New York\"}\nwith open(\"output.json\", \"w\") as file:\n    json.dump(data, file, indent=2)\n\n# JSON string operations\njson_string = '{\"name\": \"Alice\", \"age\": 30}'\ndata = json.loads(json_string)\njson_string = json.dumps(data, indent=2)\n```\n\n---\n\n## Modules & Packages\n\n### Importing Modules\n\n```python\n# Different ways to import\nimport math\nimport math as m\nfrom math import sqrt, pi\nfrom math import *  # Not recommended\n\n# Using imported modules\nprint(math.sqrt(16))  # 4.0\nprint(m.pi)          # 3.141592653589793\nprint(sqrt(25))      # 5.0\n\n# Importing from packages\nfrom collections import defaultdict, Counter\nfrom datetime import datetime, timedelta\n```\n\n### Creating Modules\n\n```python\n# mymodule.py\ndef greet(name):\n    return f\"Hello, {name}!\"\n\ndef add(a, b):\n    return a + b\n\nPI = 3.14159\n\nif __name__ == \"__main__\":\n    # Code that runs only when module is executed directly\n    print(\"Module is being run directly\")\n```\n\n### Package Structure\n\n```\nmypackage/\n    __init__.py\n    module1.py\n    module2.py\n    subpackage/\n        __init__.py\n        submodule.py\n```\n\n```python\n# __init__.py\nfrom .module1 import function1\nfrom .module2 import function2\n\n__all__ = ['function1', 'function2']\n```\n\n---\n\n## Built-in Functions\n\n### Essential Built-ins\n\n```python\n# Type and conversion functions\nprint(type(42))           # <class 'int'>\nprint(isinstance(42, int)) # True\nprint(int(\"42\"))          # 42\nprint(float(42))          # 42.0\nprint(str(42))            # \"42\"\nprint(bool(0))            # False\n\n# Sequence functions\nnumbers = [1, 2, 3, 4, 5]\nprint(len(numbers))       # 5\nprint(max(numbers))       # 5\nprint(min(numbers))       # 1\nprint(sum(numbers))       # 15\nprint(sorted(numbers, reverse=True))  # [5, 4, 3, 2, 1]\n\n# Range and enumerate\nfor i in range(5):\n    print(i)\n\nfor index, value in enumerate([\"a\", \"b\", \"c\"]):\n    print(index, value)\n\n# Zip\nnames = [\"Alice\", \"Bob\", \"Charlie\"]\nages = [25, 30, 35]\nfor name, age in zip(names, ages):\n    print(f\"{name} is {age} years old\")\n\n# Map, filter, reduce\nnumbers = [1, 2, 3, 4, 5]\nsquared = list(map(lambda x: x**2, numbers))\neven = list(filter(lambda x: x % 2 == 0, numbers))\n\nfrom functools import reduce\nproduct = reduce(lambda x, y: x * y, numbers)  # 120\n\n# Any and all\nprint(any([True, False, False]))   # True\nprint(all([True, True, False]))    # False\n\n# Abs, round, pow\nprint(abs(-5))        # 5\nprint(round(3.14159, 2))  # 3.14\nprint(pow(2, 3))      # 8\n```\n\n---\n\n## List/Dict/Set Comprehensions\n\n### List Comprehensions\n\n```python\n# Basic list comprehension\nsquares = [x**2 for x in range(10)]\n# [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n\n# With condition\neven_squares = [x**2 for x in range(10) if x % 2 == 0]\n# [0, 4, 16, 36, 64]\n\n# Nested comprehensions\nmatrix = [[i*j for j in range(3)] for i in range(3)]\n# [[0, 0, 0], [0, 1, 2], [0, 2, 4]]\n\n# Flattening a matrix\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nflattened = [num for row in matrix for num in row]\n# [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n# String manipulation\nwords = [\"hello\", \"world\", \"python\"]\nupper_words = [word.upper() for word in words]\n# ['HELLO', 'WORLD', 'PYTHON']\n```\n\n### Dictionary Comprehensions\n\n```python\n# Basic dictionary comprehension\nsquares = {x: x**2 for x in range(5)}\n# {0: 0, 1: 1, 2: 4, 3: 9, 4: 16}\n\n# With condition\neven_squares = {x: x**2 for x in range(10) if x % 2 == 0}\n# {0: 0, 2: 4, 4: 16, 6: 36, 8: 64}\n\n# From two lists\nkeys = [\"a\", \"b\", \"c\"]\nvalues = [1, 2, 3]\ndict_from_lists = {k: v for k, v in zip(keys, values)}\n# {'a': 1, 'b': 2, 'c': 3}\n\n# Transforming existing dictionary\noriginal = {\"a\": 1, \"b\": 2, \"c\": 3}\ndoubled = {k: v*2 for k, v in original.items()}\n# {'a': 2, 'b': 4, 'c': 6}\n```\n\n### Set Comprehensions\n\n```python\n# Basic set comprehension\nunique_squares = {x**2 for x in range(-5, 6)}\n# {0, 1, 4, 9, 16, 25}\n\n# With condition\neven_nums = {x for x in range(20) if x % 2 == 0}\n# {0, 2, 4, 6, 8, 10, 12, 14, 16, 18}\n```\n\n---\n\n## Generators & Iterators\n\n### Generators\n\n```python\n# Generator function\ndef count_up_to(max_count):\n    count = 1\n    while count <= max_count:\n        yield count\n        count += 1\n\n# Using generator\ncounter = count_up_to(3)\nfor num in counter:\n    print(num)  # 1, 2, 3\n\n# Generator expression\nsquares = (x**2 for x in range(10))\nprint(next(squares))  # 0\nprint(next(squares))  # 1\n\n# Infinite generator\ndef fibonacci():\n    a, b = 0, 1\n    while True:\n        yield a\n        a, b = b, a + b\n\nfib = fibonacci()\nfor _ in range(10):\n    print(next(fib))  # First 10 Fibonacci numbers\n```\n\n### Iterators\n\n```python\n# Custom iterator\nclass CountDown:\n    def __init__(self, start):\n        self.start = start\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        if self.start <= 0:\n            raise StopIteration\n        self.start -= 1\n        return self.start + 1\n\n# Usage\ncountdown = CountDown(3)\nfor num in countdown:\n    print(num)  # 3, 2, 1\n\n# Using itertools\nimport itertools\n\n# Infinite iterators\ncounter = itertools.count(1, 2)  # 1, 3, 5, 7, ...\nrepeater = itertools.repeat(\"hello\", 3)  # \"hello\", \"hello\", \"hello\"\n\n# Finite iterators\nnumbers = [1, 2, 3, 4, 5]\naccumulated = list(itertools.accumulate(numbers))  # [1, 3, 6, 10, 15]\ncombinations = list(itertools.combinations(numbers, 2))  # [(1, 2), (1, 3), ...]\n```\n\n---\n\n## Decorators\n\n### Basic Decorators\n\n```python\n# Simple decorator\ndef my_decorator(func):\n    def wrapper():\n        print(\"Something is happening before the function is called.\")\n        func()\n        print(\"Something is happening after the function is called.\")\n    return wrapper\n\n@my_decorator\ndef say_hello():\n    print(\"Hello!\")\n\n# Equivalent to: say_hello = my_decorator(say_hello)\nsay_hello()\n\n# Decorator with arguments\ndef my_decorator(func):\n    def wrapper(*args, **kwargs):\n        print(f\"Calling {func.__name__}\")\n        result = func(*args, **kwargs)\n        print(f\"Finished calling {func.__name__}\")\n        return result\n    return wrapper\n\n@my_decorator\ndef add(a, b):\n    return a + b\n\nresult = add(5, 3)\n```\n\n### Advanced Decorators\n\n```python\nimport functools\nimport time\n\n# Decorator with parameters\ndef repeat(times):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            for _ in range(times):\n                result = func(*args, **kwargs)\n            return result\n        return wrapper\n    return decorator\n\n@repeat(3)\ndef greet(name):\n    print(f\"Hello, {name}!\")\n\n# Timing decorator\ndef timing_decorator(func):\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        start_time = time.time()\n        result = func(*args, **kwargs)\n        end_time = time.time()\n        print(f\"{func.__name__} took {end_time - start_time:.4f} seconds\")\n        return result\n    return wrapper\n\n@timing_decorator\ndef slow_function():\n    time.sleep(1)\n    return \"Done\"\n\n# Class-based decorator\nclass CallCounter:\n    def __init__(self, func):\n        self.func = func\n        self.count = 0\n\n    def __call__(self, *args, **kwargs):\n        self.count += 1\n        print(f\"{self.func.__name__} has been called {self.count} times\")\n        return self.func(*args, **kwargs)\n\n@CallCounter\ndef say_hello():\n    print(\"Hello!\")\n\n# Property decorator\nclass Circle:\n    def __init__(self, radius):\n        self._radius = radius\n\n    @property\n    def radius(self):\n        return self._radius\n\n    @radius.setter\n    def radius(self, value):\n        if value < 0:\n            raise ValueError(\"Radius cannot be negative\")\n        self._radius = value\n\n    @property\n    def area(self):\n        return 3.14159 * self._radius ** 2\n```\n\n---\n\n## Context Managers\n\n### Using Context Managers\n\n```python\n# File handling with context manager\nwith open(\"file.txt\", \"r\") as file:\n    content = file.read()\n# File is automatically closed\n\n# Multiple context managers\nwith open(\"input.txt\", \"r\") as infile, open(\"output.txt\", \"w\") as outfile:\n    content = infile.read()\n    outfile.write(content.upper())\n```\n\n### Creating Context Managers\n\n```python\n# Using contextlib\nfrom contextlib import contextmanager\n\n@contextmanager\ndef my_context():\n    print(\"Entering context\")\n    try:\n        yield \"Hello from context\"\n    finally:\n        print(\"Exiting context\")\n\nwith my_context() as value:\n    print(value)\n\n# Class-based context manager\nclass DatabaseConnection:\n    def __init__(self, host, port):\n        self.host = host\n        self.port = port\n        self.connection = None\n\n    def __enter__(self):\n        print(f\"Connecting to {self.host}:{self.port}\")\n        self.connection = f\"Connected to {self.host}:{self.port}\"\n        return self.connection\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        print(\"Closing database connection\")\n        self.connection = None\n\n# Usage\nwith DatabaseConnection(\"localhost\", 5432) as conn:\n    print(f\"Using connection: {conn}\")\n\n# Context manager for timing\n@contextmanager\ndef timer():\n    start = time.time()\n    try:\n        yield\n    finally:\n        end = time.time()\n        print(f\"Execution took {end - start:.4f} seconds\")\n\nwith timer():\n    # Some time-consuming operation\n    sum(range(1000000))\n```\n\n---\n\n## Regular Expressions\n\n### Basic Regex Operations\n\n```python\nimport re\n\n# Basic matching\ntext = \"Hello, World! My phone number is 123-456-7890.\"\npattern = r\"\\d{3}-\\d{3}-\\d{4}\"\nmatch = re.search(pattern, text)\nif match:\n    print(f\"Found: {match.group()}\")  # Found: 123-456-7890\n\n# Finding all matches\ntext = \"Email me at john@example.com or jane@test.org\"\npattern = r\"\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b\"\nemails = re.findall(pattern, text)\nprint(emails)  # ['john@example.com', 'jane@test.org']\n\n# Substitution\ntext = \"The price is $100 and the tax is $10\"\npattern = r\"\\$(\\d+)\"\nnew_text = re.sub(pattern, r\"£\\1\", text)\nprint(new_text)  # The price is £100 and the tax is £10\n\n# Splitting\ntext = \"apple,banana;orange:grape\"\nfruits = re.split(r\"[,;:]\", text)\nprint(fruits)  # ['apple', 'banana', 'orange', 'grape']\n```\n\n### Advanced Regex\n\n```python\n# Compiled patterns (more efficient for repeated use)\npattern = re.compile(r\"\\d+\")\nmatches = pattern.findall(\"I have 5 apples and 3 oranges\")\nprint(matches)  # ['5', '3']\n\n# Groups and capturing\ntext = \"John Smith (age 30) and Jane Doe (age 25)\"\npattern = r\"(\\w+) (\\w+) \\(age (\\d+)\\)\"\nmatches = re.findall(pattern, text)\nfor match in matches:\n    first, last, age = match\n    print(f\"{first} {last} is {age} years old\")\n\n# Named groups\npattern = r\"(?P<first>\\w+) (?P<last>\\w+) \\(age (?P<age>\\d+)\\)\"\nfor match in re.finditer(pattern, text):\n    print(f\"{match.group('first')} {match.group('last')} is {match.group('age')}\")\n\n# Lookahead and lookbehind\ntext = \"password123, password456, pass123\"\n# Positive lookahead: match \"password\" only if followed by digits\npattern = r\"password(?=\\d+)\"\nmatches = re.findall(pattern, text)\nprint(matches)  # ['password', 'password']\n\n# Common regex patterns\npatterns = {\n    \"email\": r\"\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b\",\n    \"phone\": r\"\\b\\d{3}-\\d{3}-\\d{4}\\b\",\n    \"url\": r\"https?://(?:[-\\w.])+(?:\\:[0-9]+)?(?:/(?:[\\w/_.])*(?:\\?(?:[\\w&=%.])*)?(?:\\#(?:[\\w.])*)?)?\",\n    \"ip_address\": r\"\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b\",\n    \"credit_card\": r\"\\b\\d{4}[- ]?\\d{4}[- ]?\\d{4}[- ]?\\d{4}\\b\",\n    \"date\": r\"\\b\\d{1,2}[/-]\\d{1,2}[/-]\\d{2,4}\\b\"\n}\n```\n\n---\n\n## Testing\n\n### Unit Testing with unittest\n\n```python\nimport unittest\n\ndef add(a, b):\n    return a + b\n\ndef divide(a, b):\n    if b == 0:\n        raise ValueError(\"Cannot divide by zero\")\n    return a / b\n\nclass TestMathFunctions(unittest.TestCase):\n\n    def test_add(self):\n        self.assertEqual(add(2, 3), 5)\n        self.assertEqual(add(-1, 1), 0)\n        self.assertEqual(add(0, 0), 0)\n\n    def test_divide(self):\n        self.assertEqual(divide(10, 2), 5)\n        self.assertEqual(divide(9, 3), 3)\n\n        # Test exception\n        with self.assertRaises(ValueError):\n            divide(10, 0)\n\n    def setUp(self):\n        \"\"\"Run before each test method\"\"\"\n        self.test_data = [1, 2, 3, 4, 5]\n\n    def tearDown(self):\n        \"\"\"Run after each test method\"\"\"\n        pass\n\n    def test_list_operations(self):\n        self.assertIn(3, self.test_data)\n        self.assertNotIn(10, self.test_data)\n        self.assertEqual(len(self.test_data), 5)\n\nif __name__ == \"__main__\":\n    unittest.main()\n```\n\n### Testing with pytest\n\n```python\nimport pytest\n\ndef test_add():\n    assert add(2, 3) == 5\n    assert add(-1, 1) == 0\n\ndef test_divide():\n    assert divide(10, 2) == 5\n    assert divide(9, 3) == 3\n\n    with pytest.raises(ValueError):\n        divide(10, 0)\n\n# Fixtures\n@pytest.fixture\ndef sample_data():\n    return [1, 2, 3, 4, 5]\n\ndef test_with_fixture(sample_data):\n    assert len(sample_data) == 5\n    assert 3 in sample_data\n\n# Parametrized tests\n@pytest.mark.parametrize(\"a,b,expected\", [\n    (2, 3, 5),\n    (-1, 1, 0),\n    (0, 0, 0),\n])\ndef test_add_parametrized(a, b, expected):\n    assert add(a, b) == expected\n```\n\n### Mocking\n\n```python\nfrom unittest.mock import Mock, patch\n\n# Mock object\nmock_obj = Mock()\nmock_obj.method.return_value = \"mocked result\"\nresult = mock_obj.method()\nprint(result)  # mocked result\n\n# Patching\nimport requests\n\ndef get_user_data(user_id):\n    response = requests.get(f\"https://api.example.com/users/{user_id}\")\n    return response.json()\n\n# Test with mock\n@patch('requests.get')\ndef test_get_user_data(mock_get):\n    mock_response = Mock()\n    mock_response.json.return_value = {\"name\": \"John\", \"id\": 123}\n    mock_get.return_value = mock_response\n\n    result = get_user_data(123)\n    assert result[\"name\"] == \"John\"\n    mock_get.assert_called_once_with(\"https://api.example.com/users/123\")\n```\n\n---\n\n## Performance & Optimization\n\n### Measuring Performance\n\n```python\nimport time\nimport timeit\nfrom functools import wraps\n\n# Simple timing\nstart = time.time()\n# Some operation\nsum(range(1000000))\nend = time.time()\nprint(f\"Execution time: {end - start:.4f} seconds\")\n\n# Using timeit\nexecution_time = timeit.timeit(lambda: sum(range(1000)), number=10000)\nprint(f\"Average execution time: {execution_time/10000:.6f} seconds\")\n\n# Profiling decorator\ndef profile(func):\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        start = time.time()\n        result = func(*args, **kwargs)\n        end = time.time()\n        print(f\"{func.__name__} took {end - start:.4f} seconds\")\n        return result\n    return wrapper\n\n@profile\ndef slow_function():\n    return sum(range(1000000))\n```\n\n### Memory Optimization\n\n```python\nimport sys\nfrom collections import deque\n\n# Check memory usage\nnumbers = [1, 2, 3, 4, 5]\nprint(f\"Size of list: {sys.getsizeof(numbers)} bytes\")\n\n# Use generators for large datasets\ndef large_dataset():\n    for i in range(1000000):\n        yield i * 2\n\n# Memory-efficient operations\n# Use deque for frequent insertions/deletions at both ends\nd = deque([1, 2, 3, 4, 5])\nd.appendleft(0)  # O(1) operation\nd.pop()          # O(1) operation\n\n# Use __slots__ to reduce memory usage in classes\nclass Point:\n    __slots__ = ['x', 'y']\n\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n# String concatenation optimization\n# Bad: O(n²) complexity\nresult = \"\"\nfor i in range(1000):\n    result += str(i)\n\n# Good: O(n) complexity\nresult = \"\".join(str(i) for i in range(1000))\n```\n\n### Algorithm Optimization\n\n```python\nimport bisect\nfrom collections import Counter, defaultdict\n\n# Use set for membership testing (O(1) vs O(n))\nlarge_list = list(range(10000))\nlarge_set = set(large_list)\n\n# Slow: O(n)\nif 5000 in large_list:\n    pass\n\n# Fast: O(1)\nif 5000 in large_set:\n    pass\n\n# Use bisect for sorted lists\nsorted_list = [1, 3, 5, 7, 9, 11, 13, 15]\nindex = bisect.bisect_left(sorted_list, 7)  # O(log n)\n\n# Use Counter for counting\nitems = [\"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\"]\ncount = Counter(items)\nprint(count.most_common(2))  # [('apple', 3), ('banana', 2)]\n\n# Use defaultdict to avoid key checks\ndd = defaultdict(list)\ndd['key'].append('value')  # No need to check if key exists\n```\n\n---\n\n## Professional Best Practices\n\n### Code Organization\n\n```python\n# Module structure\n\"\"\"\nModule docstring explaining the purpose of the module.\n\"\"\"\n\n__version__ = \"1.0.0\"\n__author__ = \"Your Name\"\n__email__ = \"your.email@example.com\"\n\n# Standard library imports\nimport os\nimport sys\nfrom datetime import datetime\n\n# Third-party imports\nimport requests\nimport numpy as np\n\n# Local imports\nfrom .utils import helper_function\nfrom .models import User\n\n# Constants\nDEFAULT_TIMEOUT = 30\nMAX_RETRIES = 3\n\n# Module-level variables\nlogger = logging.getLogger(__name__)\n\nclass MyClass:\n    \"\"\"Class docstring.\"\"\"\n\n    def __init__(self):\n        \"\"\"Initialize the class.\"\"\"\n        pass\n\n    def public_method(self):\n        \"\"\"Public method docstring.\"\"\"\n        return self._private_method()\n\n    def _private_method(self):\n        \"\"\"Private method (convention).\"\"\"\n        return \"private\"\n\ndef main():\n    \"\"\"Main function.\"\"\"\n    pass\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Error Handling Best Practices\n\n```python\nimport logging\n\n# Set up logging\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\ndef robust_function(data):\n    \"\"\"\n    A function that handles errors gracefully.\n\n    Args:\n        data: Input data to process\n\n    Returns:\n        Processed data\n\n    Raises:\n        ValueError: If data is invalid\n        TypeError: If data is wrong type\n    \"\"\"\n    if not isinstance(data, (list, tuple)):\n        raise TypeError(\"Data must be a list or tuple\")\n\n    if not data:\n        raise ValueError(\"Data cannot be empty\")\n\n    try:\n        result = process_data(data)\n        logger.info(f\"Successfully processed {len(data)} items\")\n        return result\n    except Exception as e:\n        logger.error(f\"Error processing data: {e}\")\n        raise\n    finally:\n        # Cleanup code here\n        pass\n\ndef process_data(data):\n    \"\"\"Process the data.\"\"\"\n    return [item * 2 for item in data]\n\n# Configuration management\nclass Config:\n    \"\"\"Configuration class.\"\"\"\n\n    def __init__(self):\n        self.debug = os.getenv(\"DEBUG\", \"False\").lower() == \"true\"\n        self.database_url = os.getenv(\"DATABASE_URL\", \"sqlite:///default.db\")\n        self.api_key = os.getenv(\"API_KEY\")\n\n        if not self.api_key:\n            raise ValueError(\"API_KEY environment variable is required\")\n\nconfig = Config()\n```\n\n### Type Hints and Documentation\n\n```python\nfrom typing import List, Dict, Optional, Union, Callable, Any\nfrom dataclasses import dataclass\nfrom enum import Enum\n\nclass Status(Enum):\n    \"\"\"Status enumeration.\"\"\"\n    PENDING = \"pending\"\n    PROCESSING = \"processing\"\n    COMPLETED = \"completed\"\n    FAILED = \"failed\"\n\n@dataclass\nclass User:\n    \"\"\"User data class.\"\"\"\n    id: int\n    name: str\n    email: str\n    age: Optional[int] = None\n    is_active: bool = True\n\ndef process_users(\n    users: List[User],\n    filter_func: Optional[Callable[[User], bool]] = None,\n    sort_key: Optional[str] = None\n) -> Dict[str, Any]:\n    \"\"\"\n    Process a list of users.\n\n    Args:\n        users: List of User objects to process\n        filter_func: Optional function to filter users\n        sort_key: Optional attribute name to sort by\n\n    Returns:\n        Dictionary containing processing results\n\n    Example:\n        >>> users = [User(1, \"Alice\", \"alice@example.com\")]\n        >>> result = process_users(users, sort_key=\"name\")\n        >>> print(result[\"count\"])\n        1\n    \"\"\"\n    if filter_func:\n        users = [user for user in users if filter_func(user)]\n\n    if sort_key:\n        users.sort(key=lambda u: getattr(u, sort_key))\n\n    return {\n        \"count\": len(users),\n        \"users\": users,\n        \"processed_at\": datetime.now().isoformat()\n    }\n\n# Generic type hints\nfrom typing import TypeVar, Generic\n\nT = TypeVar('T')\n\nclass Stack(Generic[T]):\n    \"\"\"Generic stack implementation.\"\"\"\n\n    def __init__(self) -> None:\n        self._items: List[T] = []\n\n    def push(self, item: T) -> None:\n        \"\"\"Push an item onto the stack.\"\"\"\n        self._items.append(item)\n\n    def pop(self) -> T:\n        \"\"\"Pop an item from the stack.\"\"\"\n        if not self._items:\n            raise IndexError(\"Stack is empty\")\n        return self._items.pop()\n\n    def peek(self) -> T:\n        \"\"\"Peek at the top item without removing it.\"\"\"\n        if not self._items:\n            raise IndexError(\"Stack is empty\")\n        return self._items[-1]\n```\n\n---\n\n## Code Style & Standards\n\n### PEP 8 Guidelines\n\n```python\n# Good naming conventions\nclass UserManager:  # PascalCase for classes\n    def __init__(self):\n        self.user_count = 0  # snake_case for variables\n        self._private_attr = None  # Leading underscore for private\n        self.__very_private = None  # Double underscore for name mangling\n\n    def get_user_by_id(self, user_id):  # snake_case for functions\n        \"\"\"Get user by ID.\"\"\"\n        pass\n\n    def _helper_method(self):  # Private method\n        \"\"\"Helper method.\"\"\"\n        pass\n\n# Constants\nMAX_CONNECTIONS = 100\nDEFAULT_TIMEOUT = 30\n\n# Good spacing and formatting\ndef calculate_total(items, tax_rate=0.1, discount=0.0):\n    \"\"\"Calculate total with tax and discount.\"\"\"\n    subtotal = sum(item.price for item in items)\n    discount_amount = subtotal * discount\n    taxable_amount = subtotal - discount_amount\n    tax_amount = taxable_amount * tax_rate\n    total = taxable_amount + tax_amount\n\n    return {\n        'subtotal': subtotal,\n        'discount': discount_amount,\n        'tax': tax_amount,\n        'total': total\n    }\n\n# Line length and formatting\nvery_long_variable_name = some_function_with_a_very_long_name(\n    first_argument,\n    second_argument,\n    third_argument,\n    fourth_argument\n)\n\n# List formatting\nitems = [\n    'first_item',\n    'second_item',\n    'third_item',\n    'fourth_item',\n]\n\n# Dictionary formatting\nconfig = {\n    'database_url': 'postgresql://localhost/mydb',\n    'redis_url': 'redis://localhost:6379',\n    'debug': True,\n    'max_connections': 100,\n}\n```\n\n### Code Quality Tools\n\n```python\n# Using black for formatting\n# pip install black\n# black my_file.py\n\n# Using flake8 for linting\n# pip install flake8\n# flake8 my_file.py\n\n# Using mypy for type checking\n# pip install mypy\n# mypy my_file.py\n\n# Using isort for import sorting\n# pip install isort\n# isort my_file.py\n\n# Configuration in pyproject.toml\n\"\"\"\n[tool.black]\nline-length = 88\ntarget-version = ['py39']\n\n[tool.isort]\nprofile = \"black\"\nmulti_line_output = 3\n\n[tool.mypy]\npython_version = \"3.9\"\nwarn_return_any = true\nwarn_unused_configs = true\ndisallow_untyped_defs = true\n\"\"\"\n```\n\n---\n\n## Advanced Topics\n\n### Metaclasses\n\n```python\nclass SingletonMeta(type):\n    \"\"\"Metaclass that creates a Singleton base class.\"\"\"\n    _instances = {}\n\n    def __call__(cls, *args, **kwargs):\n        if cls not in cls._instances:\n            cls._instances[cls] = super().__call__(*args, **kwargs)\n        return cls._instances[cls]\n\nclass DatabaseConnection(metaclass=SingletonMeta):\n    \"\"\"Singleton database connection.\"\"\"\n\n    def __init__(self):\n        self.connection = \"Connected to database\"\n\n# Usage\ndb1 = DatabaseConnection()\ndb2 = DatabaseConnection()\nprint(db1 is db2)  # True\n```\n\n### Descriptors\n\n```python\nclass ValidatedAttribute:\n    \"\"\"Descriptor that validates attribute values.\"\"\"\n\n    def __init__(self, validator):\n        self.validator = validator\n        self.name = None\n\n    def __set_name__(self, owner, name):\n        self.name = name\n\n    def __get__(self, instance, owner):\n        if instance is None:\n            return self\n        return instance.__dict__.get(self.name)\n\n    def __set__(self, instance, value):\n        if not self.validator(value):\n            raise ValueError(f\"Invalid value for {self.name}: {value}\")\n        instance.__dict__[self.name] = value\n\nclass Person:\n    name = ValidatedAttribute(lambda x: isinstance(x, str) and len(x) > 0)\n    age = ValidatedAttribute(lambda x: isinstance(x, int) and 0 <= x <= 150)\n\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n# Usage\nperson = Person(\"Alice\", 30)\n# person.age = -5  # Raises ValueError\n```\n\n### Async Programming\n\n```python\nimport asyncio\nimport aiohttp\n\nasync def fetch_url(session, url):\n    \"\"\"Fetch a single URL.\"\"\"\n    async with session.get(url) as response:\n        return await response.text()\n\nasync def fetch_multiple_urls(urls):\n    \"\"\"Fetch multiple URLs concurrently.\"\"\"\n    async with aiohttp.ClientSession() as session:\n        tasks = [fetch_url(session, url) for url in urls]\n        results = await asyncio.gather(*tasks)\n        return results\n\n# Generator-based coroutines\nasync def async_generator():\n    \"\"\"Async generator example.\"\"\"\n    for i in range(5):\n        await asyncio.sleep(0.1)\n        yield i\n\nasync def main():\n    \"\"\"Main async function.\"\"\"\n    # Using async generator\n    async for value in async_generator():\n        print(value)\n\n    # Concurrent execution\n    urls = [\"http://example.com\", \"http://google.com\"]\n    results = await fetch_multiple_urls(urls)\n    print(f\"Fetched {len(results)} URLs\")\n\n# Run async code\n# asyncio.run(main())\n```\n\n### Data Classes and Enums\n\n```python\nfrom dataclasses import dataclass, field\nfrom enum import Enum, auto\nfrom typing import List\nimport json\n\nclass Priority(Enum):\n    LOW = 1\n    MEDIUM = 2\n    HIGH = 3\n\nclass Status(Enum):\n    TODO = auto()\n    IN_PROGRESS = auto()\n    DONE = auto()\n\n@dataclass\nclass Task:\n    title: str\n    description: str = \"\"\n    priority: Priority = Priority.MEDIUM\n    status: Status = Status.TODO\n    tags: List[str] = field(default_factory=list)\n\n    def __post_init__(self):\n        \"\"\"Called after initialization.\"\"\"\n        if not self.title:\n            raise ValueError(\"Title cannot be empty\")\n\n    def to_dict(self):\n        \"\"\"Convert to dictionary.\"\"\"\n        return {\n            'title': self.title,\n            'description': self.description,\n            'priority': self.priority.value,\n            'status': self.status.name,\n            'tags': self.tags\n        }\n\n# Usage\ntask = Task(\n    title=\"Learn Python\",\n    description=\"Complete Python tutorial\",\n    priority=Priority.HIGH,\n    tags=[\"learning\", \"python\"]\n)\n\nprint(task.to_dict())\n```\n\n### Working with APIs\n\n```python\nimport requests\nfrom requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.util.retry import Retry\n\nclass APIClient:\n    \"\"\"Robust API client with retry logic.\"\"\"\n\n    def __init__(self, base_url, api_key):\n        self.base_url = base_url\n        self.session = requests.Session()\n\n        # Set up retry strategy\n        retry_strategy = Retry(\n            total=3,\n            backoff_factor=1,\n            status_forcelist=[429, 500, 502, 503, 504],\n        )\n\n        adapter = HTTPAdapter(max_retries=retry_strategy)\n        self.session.mount(\"http://\", adapter)\n        self.session.mount(\"https://\", adapter)\n\n        # Set default headers\n        self.session.headers.update({\n            'Authorization': f'Bearer {api_key}',\n            'Content-Type': 'application/json',\n            'User-Agent': 'MyApp/1.0'\n        })\n\n    def get(self, endpoint, params=None):\n        \"\"\"Make GET request.\"\"\"\n        url = f\"{self.base_url}/{endpoint}\"\n        response = self.session.get(url, params=params)\n        response.raise_for_status()\n        return response.json()\n\n    def post(self, endpoint, data=None):\n        \"\"\"Make POST request.\"\"\"\n        url = f\"{self.base_url}/{endpoint}\"\n        response = self.session.post(url, json=data)\n        response.raise_for_status()\n        return response.json()\n\n# Usage\nclient = APIClient(\"https://api.example.com\", \"your-api-key\")\nusers = client.get(\"users\", params={\"limit\": 10})\n```\n\n### Database Operations\n\n```python\nimport sqlite3\nfrom contextlib import contextmanager\n\nclass DatabaseManager:\n    \"\"\"Database manager with context manager support.\"\"\"\n\n    def __init__(self, db_path):\n        self.db_path = db_path\n        self.init_database()\n\n    def init_database(self):\n        \"\"\"Initialize database tables.\"\"\"\n        with self.get_connection() as conn:\n            conn.execute('''\n                CREATE TABLE IF NOT EXISTS users (\n                    id INTEGER PRIMARY KEY,\n                    name TEXT NOT NULL,\n                    email TEXT UNIQUE NOT NULL,\n                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n                )\n            ''')\n\n    @contextmanager\n    def get_connection(self):\n        \"\"\"Context manager for database connections.\"\"\"\n        conn = sqlite3.connect(self.db_path)\n        conn.row_factory = sqlite3.Row  # Enable column access by name\n        try:\n            yield conn\n        except Exception:\n            conn.rollback()\n            raise\n        else:\n            conn.commit()\n        finally:\n            conn.close()\n\n    def create_user(self, name, email):\n        \"\"\"Create a new user.\"\"\"\n        with self.get_connection() as conn:\n            cursor = conn.execute(\n                'INSERT INTO users (name, email) VALUES (?, ?)',\n                (name, email)\n            )\n            return cursor.lastrowid\n\n    def get_user(self, user_id):\n        \"\"\"Get user by ID.\"\"\"\n        with self.get_connection() as conn:\n            cursor = conn.execute(\n                'SELECT * FROM users WHERE id = ?',\n                (user_id,)\n            )\n            row = cursor.fetchone()\n            return dict(row) if row else None\n\n# Usage\ndb = DatabaseManager(\"users.db\")\nuser_id = db.create_user(\"Alice\", \"alice@example.com\")\nuser = db.get_user(user_id)\n```\n\n---\n\n## Quick Reference\n\n### Common Patterns\n\n```python\n# Singleton pattern\nclass Singleton:\n    _instance = None\n\n    def __new__(cls):\n        if cls._instance is None:\n            cls._instance = super().__new__(cls)\n        return cls._instance\n\n# Factory pattern\nclass ShapeFactory:\n    @staticmethod\n    def create_shape(shape_type, **kwargs):\n        if shape_type == \"circle\":\n            return Circle(kwargs[\"radius\"])\n        elif shape_type == \"rectangle\":\n            return Rectangle(kwargs[\"width\"], kwargs[\"height\"])\n        else:\n            raise ValueError(f\"Unknown shape type: {shape_type}\")\n\n# Observer pattern\nclass Observable:\n    def __init__(self):\n        self._observers = []\n\n    def attach(self, observer):\n        self._observers.append(observer)\n\n    def detach(self, observer):\n        self._observers.remove(observer)\n\n    def notify(self, event):\n        for observer in self._observers:\n            observer.update(event)\n\n# Chain of responsibility\nclass Handler:\n    def __init__(self, successor=None):\n        self.successor = successor\n\n    def handle(self, request):\n        if self.can_handle(request):\n            return self.process(request)\n        elif self.successor:\n            return self.successor.handle(request)\n        else:\n            raise ValueError(\"No handler available\")\n\n    def can_handle(self, request):\n        raise NotImplementedError\n\n    def process(self, request):\n        raise NotImplementedError\n```\n\n### Performance Tips\n\n```python\n# Use local variables in loops\ndef slow_function():\n    for i in range(1000):\n        math.sqrt(i)  # Global lookup\n\ndef fast_function():\n    sqrt = math.sqrt  # Local variable\n    for i in range(1000):\n        sqrt(i)\n\n# Use __slots__ for memory efficiency\nclass Point:\n    __slots__ = ['x', 'y']\n\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n# Use collections.deque for queues\nfrom collections import deque\nqueue = deque()\nqueue.append(1)  # O(1)\nqueue.popleft()  # O(1)\n\n# Use dict.get() instead of try/except for optional keys\n# Slow\ntry:\n    value = dictionary['key']\nexcept KeyError:\n    value = default_value\n\n# Fast\nvalue = dictionary.get('key', default_value)\n\n# Use list comprehensions instead of loops\n# Slow\nresult = []\nfor i in range(10):\n    result.append(i * 2)\n\n# Fast\nresult = [i * 2 for i in range(10)]\n```\n\n---\n\n## Conclusion\n\nThis comprehensive Python cheat sheet covers fundamental concepts, advanced features, and professional best practices. Remember these key principles:\n\n1. **Write readable code** - Code is read more often than it's written\n2. **Follow PEP 8** - Consistent style improves maintainability\n3. **Use type hints** - They improve code documentation and catch errors\n4. **Handle errors gracefully** - Anticipate and handle edge cases\n5. **Test your code** - Automated tests prevent regressions\n6. **Profile before optimizing** - Measure performance bottlenecks\n7. **Document your code** - Clear docstrings and comments help others\n8. **Use virtual environments** - Isolate project dependencies\n9. **Keep learning** - Python ecosystem is constantly evolving\n10. **Practice regularly** - Consistent coding improves skills\n\nRemember: The best code is not just functional, but also readable, maintainable, and efficient. Happy coding!\n";
